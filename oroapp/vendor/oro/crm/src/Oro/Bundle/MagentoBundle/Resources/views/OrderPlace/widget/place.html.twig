{% block page_container %}
    <div class="order-form-widget widget-content">
        {% if not error %}
            <iframe id="orderPlaceFrame" data-src="{{ sourceUrl }}" src="" width="1" height="1" frameborder="0"></iframe>

            <script type="text/javascript">
                var ORO_ORDER_EMBED_API = {};

                require(['jquery', 'underscore', 'oroui/js/mediator', 'oroui/js/widget-manager', 'oroui/js/messenger',
                    'orotranslation/js/translator'], function ($, _, mediator, widgetManager, messenger, __) {
                    var $frame = $('#orderPlaceFrame'),
                        src = $frame.data('src'),
                        modalWidgetAlias = 'transaction-dialog',
                        messageTemplate = _.template("<%= message %> <a href=\"<%= url %>\" class=\"order-link\"><%= urlLabel %></a> ");

                    $frame.on('load', function() {
                        var offset = $frame.closest('.ui-dialog').find('.ui-dialog-titlebar').outerHeight() || 0;
                        $frame.addClass('loaded').parent().css({'top': offset});
                        widgetManager.getWidgetInstance(
                            {{ app.request.get('_wid')|json_encode|raw }},
                            function(widget) {
                                widget.trigger('externalContentLoaded')
                            }
                        );
                    });
                    $frame.attr('src', src.replace(/^https?:/gi, ''));
                    ORO_ORDER_EMBED_API.success = function () {
                        var showMessage = function(data) {
                                var message = data.message;
                                if (data.statusType == 'success') {
                                    message = messageTemplate(
                                            {
                                                message: data.message,
                                                url: data.url,
                                                urlLabel: __('oro.magento.view_order')
                                            }
                                    );
                                }
                                messenger.notificationFlashMessage(data.statusType, message);
                            },
                            chooseMessage = function (data) {
                                if (mediator.execute('isInAction')) {
                                    mediator.once('page:afterChange', function() {showMessage(data)});
                                } else {
                                    showMessage(data);
                                }
                            };

                        var performMessage = messenger.notificationFlashMessage('warning', __('oro.magento.performing_synchronization'));

                        widgetManager.getWidgetInstanceByAlias(modalWidgetAlias, function (widget) {
                            widget.trigger('formSave');
                            {% if cartId is defined %}
                                {% set syncURL = path('oro_magento_orderplace_new_cart_order_sync', {id: cartId}) %}
                                $.ajax({
                                    dataType: 'json',
                                    url: {{ syncURL|json_encode|raw}},
                                    beforeSend: function() {
                                        widget.remove();
                                        mediator.execute('showLoading');
                                    },
                                    success: function(data) {
                                        if (mediator.execute('isInAction')) {
                                            mediator.once('page:afterChange', function() {showMessage(data)});
                                        } else {
                                            mediator.trigger('datagrid:doReset:magento-customer-orders-widget-grid');
                                            showMessage(data);
                                            mediator.execute('refreshPage');
                                        }
                                    }
                                }).always(function () {
                                    performMessage.close();
                                });
                            {% elseif customerId is defined %}
                                {% set syncURL = path('oro_magento_orderplace_new_customer_order_sync', {id: customerId}) %}
                                $.ajax({
                                    dataType: 'json',
                                    url: {{ syncURL|json_encode|raw }},
                                    beforeSend: function() {
                                        widget.remove();
                                    },
                                    success: function(data) {
                                        mediator.trigger('datagrid:doReset:magento-customer-orders-widget-grid');
                                        chooseMessage(data);
                                    },
                                    errorHandlerMessage: __('oro.magento.external_error')
                                }).always(function () {
                                    performMessage.close();
                                });
                            {% endif %}
                        });
                    };
                    ORO_ORDER_EMBED_API.error = function () {
                        messenger.notificationFlashMessage('error', __('oro.magento.external_error'));
                        widgetManager.getWidgetInstanceByAlias(modalWidgetAlias, function (widget) {
                            widget.remove();
                        });
                    };
                });
            </script>
        {% else %}
            <script type="text/javascript">
                require(['oroui/js/widget-manager', 'oroui/js/messenger'],
                function (widgetManager, messenger) {
                    messenger.notificationFlashMessage('error', {{ error|json_encode|raw }});
                    widgetManager.getWidgetInstanceByAlias('transaction-dialog', function (widget) {
                        widget.remove();
                    });
                });
            </script>
        {% endif %}
    </div>
{% endblock %}
