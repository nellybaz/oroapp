{% macro getCheckerOptions(form, elSelector) %}
    {% set modificationAreAllowed = form.websiteId.vars.disabled is not defined or form.websiteId.vars.disabled == false %}
    {% set transportEntityId = form.vars.value is defined ? form.vars.value.id : null %}
    {% set soapCheckerOptions = {
        el:                     elSelector,
        websiteSelectEl:        '#' ~ form.websiteId.vars.id,
        websitesListEl:         '#' ~ form.websites.vars.id,
        connectorsEl:           '#' ~ form.parent.connectors.vars.id,
        isExtensionInstalledEl: '#' ~ form.isExtensionInstalled.vars.id,
        extensionVersionEl:     '#' ~ form.extensionVersion.vars.id,
        magentoVersionEl:       '#' ~ form.magentoVersion.vars.id,
        sharedGuestEmailListEl: '#' ~ form.sharedGuestEmailList.vars.id,
        isDisplayOrderNotesEl:  '#' ~ form.isDisplayOrderNotes.vars.id,
        isOrderNoteSupportExtensionVersionEl: '#' ~ form.isOrderNoteSupportExtensionVersion.vars.id,

        websitesModificationAllowed : modificationAreAllowed,
        transportEntityId           : transportEntityId,
    } %}
    {%  if form.adminUrl is defined %}
        {% set soapCheckerOptions = soapCheckerOptions|merge({adminUrlEl: '#' ~ form.adminUrl.vars.id}) %}
    {%  endif %}
    {{ soapCheckerOptions|json_encode|raw }}
{% endmacro %}

{% block oro_magento_transport_check_button_widget %}
    {% set oroBridgeExtension = form.parent.vars.oroBridgeExtension is defined ? form.parent.vars.oroBridgeExtension : null %}
    <div class="control-group">
        <div class="controls">
            <button type="{{ type|default('button') }}" {{ block('button_attributes') }}>{{ label|trans({}, translation_domain) }}</button>
            <script type="text/javascript">
                require(['oro/magento/checker'], function (Checker) {
                    "use strict";
                    new Checker({{ _self.getCheckerOptions(form.parent, '#' ~ form.vars.id) }});
                });
            </script>
            {% if oroBridgeExtension is not null %}
                {% if oroBridgeExtension.isExtensionInstalled %}
                    {% if not oroBridgeExtension.isSupportExtensionVersion %}
                        {% set message = 'oro.magento.magentotransport.message.outdated_bridge'|trans({'%extension_version%': oroBridgeExtension.extensionVersion}) %}
                        {% set messageType = 'warning' %}
                    {% endif %}
                {% else %}
                    {% set message = 'oro.magento.magentotransport.message.native_soap'|trans %}
                    {% set messageType = 'info' %}
                {% endif %}

                {% if messageType is defined and message is defined %}
                    <div class="alert alert-{{ messageType }} connection-status">{{ message }}</div>
                {% endif %}
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block oro_magento_transport_check_button_row %}
    {{ block('button_row') }}
{% endblock %}

{% block oro_magento_website_select_row %}
    {% spaceless %}
        <div class="control-group{% if attr.class is defined %} {{ attr.class }}{% endif %}">
            {% if label is not sameas(false) %}
                <div class="control-label wrap">
                    {{ form_label(form, '' , { label_attr: label_attr}) }}
                </div>
            {% endif %}
            <div class="controls{% if errors|length > 0 %} validation-error{% endif %} magento-website-selector-container">
                {{ form_widget(form) }}
                {% if form.vars.disabled is not sameas(true) %}
                    <a href="javascript:void(0)" class="no-hash sync-website-list-link">
                        <i class="fa-refresh"></i>{{ 'oro.magento.magentotransport.website_refresh.label'|trans }}
                    </a>
                    <script type="text/javascript">
                        require(['oro/magento/checker'], function (Checker) {
                            "use strict";
                            new Checker({{ _self.getCheckerOptions(form.parent, '.sync-website-list-link') }});
                        });
                    </script>
                {% endif %}
                <div class="clear-fix"></div>
                {{ form_errors(form) }}
            </div>
        </div>
    {% endspaceless %}
{% endblock %}

{% block oro_magento_order_place_form_type_row %}
    {% set cartId = form.cart_id.vars.data %}
    {{ oro_widget_render({
        'widgetType': 'block',
        'alias': 'order-place-widget',
        'url': path('oro_magento_orderplace_cart', {id: cartId}),
        'loadingMaskEnabled': true
    }) }}

    <script type="text/javascript">
        require(['underscore', 'oroui/js/widget-manager'], function(_, widgetManager) {
            widgetManager.getWidgetInstanceByAlias('order-place-widget', function(widget) {
                widget._showLoading();

                widget.once('externalContentLoaded', _.bind(widget._hideLoading, widget));
            });
        });
    </script>
{% endblock %}

{% block oro_magento_customer_addresses_widget %}
    <div {% if form.vars.value and form.vars.value.originId %}class="collection-remove-disabled"{% endif %}>
        {{ form_widget(form) }}
    </div>
{% endblock %}
