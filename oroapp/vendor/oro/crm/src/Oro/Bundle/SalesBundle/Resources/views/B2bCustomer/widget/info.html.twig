{% import 'OroUIBundle::macros.html.twig' as UI %}
{% import 'OroEntityConfigBundle::macros.html.twig' as entityConfig %}
{% import 'OroAddressBundle::macros.html.twig' as address %}
{% import 'OroChannelBundle::macros.html.twig' as channel %}
{% import 'OroSalesBundle::macros.html.twig' as sales %}

<div class="widget-content">
    <div class="row-fluid form-horizontal">
        <div class="responsive-block">
            {{ UI.renderProperty('oro.sales.b2bcustomer.name.label'|trans, entity.name) }}

            {{ channel.renderChannelProperty(entity, 'oro.sales.b2bcustomer.data_channel.label') }}

            {%- if is_granted('oro_account_view') and entity.account -%}
                {% set accountView = '<a href="' ~ path('oro_account_view', {'id': entity.account.id}) ~ '">' ~ UI.renderEntityViewLabel(entity.account, 'name', 'oro.account.entity_label') ~ '</a>' %}
            {%- else -%}
                {% set accountView = UI.renderEntityViewLabel(entity.account, 'name') %}
            {%- endif -%}
            {{ UI.renderHtmlProperty('oro.sales.b2bcustomer.account.label'|trans, accountView) }}
            {{ UI.renderHtmlProperty('oro.contact.phones.label'|trans, entity.phones.count ? sales.renderCollectionWithPrimaryElement(entity.phones, false, entity) : null) }}
            {{ UI.renderHtmlProperty('oro.contact.emails.label'|trans, entity.emails.count ? sales.renderCollectionWithPrimaryElement(entity.emails, true, entity) : null) }}
            {{ UI.renderHtmlProperty(
                'oro.sales.b2bcustomer.contact.label'|trans,
                UI.entityViewLink(entity.contact, entity.contact ? entity.contact|oro_format_name : '', 'oro_contact_view')
            ) }}

            {% if entity.billingAddress is not empty %}
                {{ UI.renderHtmlProperty('oro.sales.b2bcustomer.billing_address.label'|trans, address.renderAddress(entity.billingAddress)) }}
            {% endif %}

            {% if entity.shippingAddress is not empty %}
                {{ UI.renderHtmlProperty('oro.sales.b2bcustomer.shipping_address.label'|trans, address.renderAddress(entity.shippingAddress)) }}
            {% endif %}
        </div>
        <div class="responsive-block">
            {{ entityConfig.renderDynamicFields(entity) }}
        </div>
    </div>
</div>
