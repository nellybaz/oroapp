<?php

namespace Oro\Bundle\EntityExtendBundle\Extend;

use Doctrine\ORM\EntityManager;

use Oro\Bundle\EntityConfigBundle\Config\EntityManagerBag;
use Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider;
use Oro\Bundle\EntityExtendBundle\EntityConfig\ExtendScope;

class EntityProxyGenerator
{
    /** @var EntityManagerBag */
    protected $entityManagerBag;

    /** @var ConfigProvider */
    protected $extendConfigProvider;

    /** @var string */
    protected $kernelCacheDir;

    /** @var string */
    protected $cacheDir;

    /**
     * @param EntityManagerBag $entityManagerBag
     * @param ConfigProvider   $extendConfigProvider
     * @param string           $cacheDir
     */
    public function __construct(EntityManagerBag $entityManagerBag, ConfigProvider $extendConfigProvider, $cacheDir)
    {
        $this->entityManagerBag     = $entityManagerBag;
        $this->extendConfigProvider = $extendConfigProvider;
        $this->kernelCacheDir       = $cacheDir;
        $this->cacheDir             = $cacheDir;
    }

    /**
     * Gets the cache directory
     *
     * @return string
     */
    public function getCacheDir()
    {
        return $this->cacheDir;
    }

    /**
     * Sets the cache directory
     *
     * @param string $cacheDir
     */
    public function setCacheDir($cacheDir)
    {
        $this->cacheDir = $cacheDir;
    }

    /**
     * Generate doctrine proxy classes for extended entities
     */
    public function generateProxies()
    {
        foreach ($this->entityManagerBag->getEntityManagers() as $em) {
            $this->generateEntityManagerProxies($em);
        }
    }
    /**
     * Generate doctrine proxy classes for extended entities for the given entity manager
     *
     * @param EntityManager $em
     */
    protected function generateEntityManagerProxies(EntityManager $em)
    {
        $isAutoGenerated = $em->getConfiguration()->getAutoGenerateProxyClasses();
        if (!$isAutoGenerated) {
            $proxyDir = $em->getConfiguration()->getProxyDir();
            if (!empty($this->cacheDir)
                && $this->kernelCacheDir !== $this->cacheDir
                && strpos($proxyDir, $this->kernelCacheDir) === 0
            ) {
                $proxyDir = $this->cacheDir . substr($proxyDir, strlen($this->kernelCacheDir));
            }
            $metadataFactory = $em->getMetadataFactory();
            $proxyFactory    = $em->getProxyFactory();
            $extendConfigs   = $this->extendConfigProvider->getConfigs(null, true);
            foreach ($extendConfigs as $extendConfig) {
                if (!$extendConfig->is('is_extend')) {
                    continue;
                }
                if ($extendConfig->in('state', [ExtendScope::STATE_NEW, ExtendScope::STATE_DELETE])) {
                    continue;
                }

                $entityClass   = $extendConfig->getId()->getClassName();
                $proxyFileName = $proxyDir . DIRECTORY_SEPARATOR . '__CG__'
                    . str_replace('\\', '', $entityClass) . '.php';
                $metadata      = $metadataFactory->getMetadataFor($entityClass);

                $proxyFactory->generateProxyClasses([$metadata], $proxyDir);
                clearstatcache(true, $proxyFileName);
            }
        }
    }
}
