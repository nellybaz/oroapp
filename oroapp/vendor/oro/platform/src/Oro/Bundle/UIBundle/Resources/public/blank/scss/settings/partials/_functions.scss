// @theme: blank;

// @return the value with a nested map;
// $map: (
//     'main': (
//         'foo': 'bar',
//     )
// );
// Use: get-nested-map-value($map, 'main', 'foo') => bar;

@function get-nested-map-value($map: null, $key: 'main', $value: 'main') {
    @if (type-of($map) == 'map') {
        @return map-get(map-get($map,  $key), $value);
    }
}

// @return the value in a $color-palette map associated with a given key;
// Use: color: get-color('primary', 'base') => color: #000;

@function get-color($palette: 'primary', $key: 'main') {
    $colorKey: get-nested-map-value($color-palette, $palette, $key);

    @if ($colorKey) {
        @return $colorKey;
    } @else {
        @warn 'Color not found:' $palette $key;
    }
}

// @return the value in a $theme-fonts map associated with a given key;
// Use: font-family: get-font-name('main') => font-family: 'Lato';

@function get-font-name($key) {
    $font: get-nested-map-value($theme-fonts, $key, 'family');

    @if ($font) {
        @return $font;
    } @else {
        @warn 'Front not found:' $key;
    }
}

// @return: the value in a map associated with a given key
// Use: z-index: z('base');

@function z($layer: 'base') {
    $layers: (
            'base': 1,
            'dropdown': 50,
            'fixed': 100,
            'popup': 150,
            'hidden': -1
    ) !default;

    $z-index: map-get($layers, $layer);

    @return $z-index;
}


// Remove the unit of a length
// @return number
// Use: $value: strip-units(10px); -> 10

@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}


// In SASS we can only once set a value to variable with flag !default, all others values will be ignored.
// The variable must be declared.
// @return new value with flag !default;
// Use: $component-var: reset-var($component-var, 10);

@function update-default($var, $value: null) {
    @if ($var) {
        $var: null;
        $var: $value !default;

        @return $var;
    }
}

// Extended default map-merge
// Merge two maps together into new map, w/o null keys

@function map-merge-wo-null($map1, $map2) {
    $result: map-merge($map1, $map2);

    @each $key in map-keys($result) {
        @if map-get($result, $key) == null {
            $result: map-remove($result, $key);
        }
    }

    @return $result;
}

// Merge breakpoints
// $old-breakpoints: (
//     'desktop': '(min-width: 1100px)',
//     'tablet': '(max-width: 1099px )'
// );
// $new-breakpoints: (
//     'desktop': '(min-width: 1200px)',
//     'tablet': null,
//     'mobile': '(max-width: 640px)'
// );
// @return the value with a merged breakpoints;
// $breakpoints: (
//     'desktop''(min-width: 1200px)',
//     'mobile': '(max-width: 640px)'
// );
// Use: merge-breakpoints($old-breakpoints, $new-breakpoints);

@function merge-breakpoints($breakpoints1, $news-breakpoint2) {
    @return  map-merge-wo-null($breakpoints1, $news-breakpoint2);
}
