{# Chart variables format:

    "options":
        "name": "chart_name",
        "data_schema" => array(
            "label" => array("field_name" => "name", "label" => "First Name", "type" => "string"),
            "value" => array("field_name" => "salary", "label" => "Salary", "type" => "money"),
        ),
        "settings" => array(
            "foo" => "bar"
        ),
    "config": { /** Chart config from in format of oro/charts.yml */ }
    "data": [
        {"label": "In progress", "value": 1000},
        {"label": "Lost", "value": 500},
        {"label": "Won", "value": 10000},
    ]

#}
{% if data|length > 0 %}
    {% set containerId = "chart-container-" ~ random() %}
    <div class="chart-container">
        <div class="clearfix">
            <div id="{{ containerId }}-chart" class="multiline-chart chart pull-left"></div>
        </div>
    </div>

    <script type="text/javascript">
    require(['jquery', 'oroui/js/layout', 'flotr2', 'orochart/js/data_formatter', 'oroui/js/mediator'],
            function ($, layout, Flotr, dataFormatter, mediator) {
                $(function () {
                    var $chart = $('#{{ containerId }}-chart');
                    var $widgetContent = $chart.parents('.chart-container').parent();
                    var setChartSize = function () {
                        var chartWidth = Math.round($widgetContent.width() * 0.75);
                        if (chartWidth != $chart.width()) {
                            $chart.width(chartWidth);
                            $chart.height(Math.min(Math.round(chartWidth * 0.4), 450));
                            return true;
                        }
                        return false;
                    };
                    var setChartContainerSize = function () {
                        $chart.closest('.clearfix').width($chart.width());
                    };
                    var drawChart = function () {
                        var xFormat = {{ options.data_schema.label.type|json_encode|raw }};
                        var yFormat = {{ options.data_schema.value.type|json_encode|raw }};
                        if (!$chart.get(0).clientWidth) {
                            return;
                        }

                        var rawData = {{ data|json_encode|raw }};
                        var length = _.size(rawData[_.first(_.keys(rawData))]);

                        if (dataFormatter.isValueNumerical(xFormat)) {
                            var sort = function (rawData) {
                                rawData.sort(function (first, second) {
                                    if (first.label == null) {
                                        return -1;
                                    }
                                    if (second.label == null) {
                                        return 1;
                                    }
                                    var firstLabel = dataFormatter.parseValue(first.label, xFormat);
                                    var secondLabel = dataFormatter.parseValue(second.label, xFormat);
                                    return firstLabel - secondLabel;
                                });
                            };

                            _.each(rawData, sort);
                        }

                        var getXLabel = function (data) {
                            var label = dataFormatter.formatValue(data, xFormat);
                            if (label === null) {
                                var number = parseInt(data);
                                if (rawData.length > number) {
                                    label = rawData[number]['label'] === null ? '{{ 'N/A'|trans }}' : rawData[number]['label'];
                                } else {
                                    label = '';
                                }
                            }
                            return label;
                        };

                        var getYLabel = function (data) {
                            var label = dataFormatter.formatValue(data, yFormat);
                            if (label === null) {
                                var number = parseInt(data);
                                if (rawData.length > number) {
                                    label = rawData[data]['value'] === null ? '{{ 'N/A'|trans }}' : rawData[data]['value'];
                                } else {
                                    label = '';
                                }
                            }
                            return label;
                        };

                        var connectDots = {{ options.settings.connect_dots_with_line|json_encode|raw }};
                        var colors = {{ config.default_settings.chartColors|json_encode|raw }};

                        var makeChart = function (rawData, count, key) {
                            var chartData = [];
                            var prevYValue = 0;

                            for (var i in rawData) {
                                var yValue = dataFormatter.parseValue(rawData[i]['value'], yFormat);
                                yValue = yValue === null ? parseInt(i) : yValue;
                                yValue = yValue + prevYValue;
                                var xValue = dataFormatter.parseValue(rawData[i]['label'], xFormat);
                                xValue = xValue === null ? parseInt(i) : xValue;

                                var item = [xValue, yValue];
                                chartData.push(item);
                                prevYValue = yValue;
                            }

                            return {
                                label: key,
                                data: chartData,
                                color: colors[Math.ceil(colors.length/count)],
                                markers: { show: false },
                                points: { show: true }
                            };
                        };

                        var charts = [];
                        var count = 0;

                        _.each(rawData, function (rawData, key) {
                            var result = makeChart(rawData, count, key);
                            count++;

                            charts.push(result);
                        });

                        Flotr.draw(
                                $chart.get(0),
                                charts,
                                {
                                    colors: colors,
                                    fontColor: {{ options.settings.chartFontColor|json_encode|raw }},
                                    fontSize: {{ options.settings.chartFontSize|json_encode|raw }},
                                    lines: {
                                        show: connectDots
                                    },
                                    mouse: {
                                        track: true,
                                        relative: true,
                                        trackFormatter: function (pointData) {
                                            return {{ options.data_schema.label.label|trans|json_encode|raw }}
                                                + ': ' + getXLabel(pointData.x)
                                                + ';</br>' + {{ options.data_schema.value.label|trans|json_encode|raw }}
                                                + ': ' + getYLabel(pointData.y);
                                        }
                                    },
                                    yaxis: {
                                        autoscale: true,
                                        autoscaleMargin: 1,
                                        tickFormatter: function (y) {
                                            return getYLabel(y);
                                        },
                                        title: {{ options.data_schema.value.label|trans|json_encode|raw }}
                                    },
                                    xaxis: {
                                        autoscale: true,
                                        autoscaleMargin: 0,
                                        labelsAngle: 45,
                                        mode: 'time',
                                        noTicks: length * 2,
                                        tickFormatter: function (x) {
                                            return getXLabel(x);
                                        },
                                        title: {{ options.data_schema.label.label|trans|json_encode|raw }}
                                    },
                                    HtmlText: false,
                                    grid: {
                                        verticalLines: false,
                                        labelMargin: 10
                                    },
                                    legend: {
                                        show: true,
                                        noColumns: 1,
                                        position: 'nw'
                                    }
                                }
                        );
                    };

                    mediator.on('page:afterChange', function(){
                        setChartSize();
                        drawChart();
                        setChartContainerSize();
                    });

                    $(window).resize(function () {
                        if (setChartSize()) {
                            drawChart();
                            setChartContainerSize();
                        }
                    });
                });
            });
    </script>
{% endif %}
