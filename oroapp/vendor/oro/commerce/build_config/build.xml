<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<project name="OroCommerce Project" basedir=".." default="help">

    <target name="help" description="Print additional usage instructions.">
        <echo>Main targets:</echo>
        <echo/>
        <echo> unit-tests           Run unit tests.</echo>
        <echo>                      (clean prepare-reportdir install-dependencies run-unit-tests)</echo>
        <echo> unit-tests-coverage  Run unit tests with code coverage collection enabled.</echo>
        <echo>                      (clean prepare-reportdir install-dependencies run-unit-tests-with-coverage)</echo>
        <echo> code-standards       Run code standards checks.</echo>
        <echo>                      (clean prepare-reportdir run-code-standards)</echo>
        <echo> functional-tests     Run functional tests.</echo>
        <echo>                      (clean prepare install install-admin-fixture run-functional-tests)</echo>
        <echo> selenium-tests       Run Selenium tests.</echo>
        <echo>                      (clean prepare install install-admin-fixture install-test-fixtures run-selenium-tests)</echo>
        <echo/>
        <echo>Build artifacts are created within the "build" directory. All normally</echo>
        <echo>generated reports and logs can be found in "build/reports"</echo>
        <echo/>
        <echo>Supported parameters:</echo>
        <echo/>
        <echo> testsuite    A test suite to be executed. "Project Unit Tests" and "Project Functional Tests" are </echo>
        <echo>              default values for 'run-unit-tests' and 'run-functional-tests' targets respectively.</echo>
        <echo>              If running on Bamboo, override by defining 'testsuite' variable, e.g. "My Tests".</echo>
        <echo>              If running locally, use ant -Dtestsuite="My Tests"</echo>
        <echo> testpath     Can be used to run tests contained within a specific directory only.</echo>
        <echo>              If running on Bamboo, set value for the 'testpath' variable.</echo>
        <echo>              If running locally, use ant -Dtestpath=./path/to/subdirectory</echo>
        <echo>              PHPUnit limitation - when 'testpath' is set, 'testsuite' value is ignored.</echo>
        <echo> depclean     Do full cleanup of installed dependencies.</echo>
        <echo>              Disabled by default unless Bamboo is detected.</echo>
        <echo>              To perform full cleanup when running locally do ant -Ddepclean=true</echo>
        <echo/>
    </target>

    <!-- Include Ant-Contrib to use "if", "var" and other goodies. -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="/usr/share/java/lib/ant-contrib-0.3.jar"/>
            <!-- RedHat/CentOS/Fedora -->
            <pathelement location="/usr/share/java/ant/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <property environment="env"/>

    <property name="builddir" value="${basedir}/build"/>
    <property name="confdir" value="${basedir}/build_config"/>
    <property name="reportdir" value="${basedir}/build/reports"/>
    <property name="srcdir" value="${basedir}/src"/>

    <property name="appdir" value="${basedir}/app"/>
    <condition property="exists.appdir">
        <available file="${appdir}" type="dir"/>
    </condition>
    <property name="cachedir" value="${appdir}/cache"/>

    <!-- The following values can be set directly, or in Bamboo. -->
    <!-- Use the short property name for ant, e.g. and -Dtestsuite="Some Other Suite". -->
    <!-- Use the short property name in Bamboo as well, e.g. something will be passed in as env.bamboo_something. -->
    <condition property="buildid" value="${env.bamboo_buildResultKey}" else="buildid">
        <isset property="env.bamboo_buildResultKey"/>
    </condition>

    <!-- Location of the PHPUnit config file -->
    <condition property="testconfig" value="${env.bamboo_testconfig}">
        <isset property="env.bamboo_testconfig"/>
    </condition>
    <condition property="testconfig" value="${confdir}/phpunit.xml">
        <available file="${confdir}/phpunit.xml" type="file"/>
    </condition>
    <condition property="testconfig" value="${confdir}/phpunit.xml.dist">
        <available file="${confdir}/phpunit.xml.dist" type="file"/>
    </condition>
    <condition property="testconfig" value="${basedir}/phpunit.xml">
        <available file="${basedir}/phpunit.xml" type="file"/>
    </condition>
    <condition property="testconfig" value="${basedir}/phpunit.xml.dist">
        <available file="${basedir}/phpunit.xml.dist" type="file"/>
    </condition>
    <condition property="testconfig" value="${appdir}/phpunit.xml">
        <available file="${appdir}/phpunit.xml" type="file"/>
    </condition>
    <condition property="testconfig" value="${appdir}/phpunit.xml.dist">
        <available file="${appdir}/phpunit.xml.dist" type="file"/>
    </condition>

    <condition property="testsuite" value="${env.bamboo_testsuite}" else="">
        <isset property="env.bamboo_testsuite"/>
    </condition>

    <condition property="testpath" value="${env.bamboo_testpath}" else="">
        <isset property="env.bamboo_testpath"/>
    </condition>

    <!-- Application environment (e.g. prod, test, dev) -->
    <condition property="run.env" value="${env.bamboo_env}" else="test">
        <isset property="env.bamboo_env"/>
    </condition>

    <!-- Do not install the application (e.g. when running installer tests) -->
    <condition property="run.noappinstall" value="true">
        <isset property="env.bamboo_noappinstall"/>
    </condition>
    <condition property="run.noappinstall" value="true">
        <isset property="noappinstall"/>
    </condition>

    <!-- Database parameters -->
    <condition property="db.type" value="${env.bamboo_dbtype}" else="mysql">
        <isset property="env.bamboo_dbtype"/>
    </condition>
    <condition property="db.driver" value="pdo_mysql">
        <equals arg1="${db.type}" arg2="mysql"/>
    </condition>
    <condition property="db.driver" value="pdo_pgsql">
        <equals arg1="${db.type}" arg2="pgsql"/>
    </condition>
    <condition property="db.host" value="${env.bamboo_dbhost}" else="127.0.0.1">
        <isset property="env.bamboo_dbhost"/>
    </condition>
    <condition property="db.port" value="${env.bamboo_dbport}">
        <isset property="env.bamboo_dbport"/>
    </condition>
    <condition property="db.port" value="3306">
        <equals arg1="${db.type}" arg2="mysql"/>
    </condition>
    <condition property="db.port" value="5432">
        <equals arg1="${db.type}" arg2="pgsql"/>
    </condition>
    <condition property="db.user" value="${env.bamboo_dbuser}" else="mysql">
        <isset property="env.bamboo_dbuser"/>
    </condition>
    <condition property="db.pass" value="${env.bamboo_dbpass}" else="mysql">
        <isset property="env.bamboo_dbpass"/>
    </condition>
    <condition property="db.name" value="${env.bamboo_dbname}" else="${buildid}">
        <isset property="env.bamboo_dbname"/>
    </condition>

    <!-- Run PHPUnit in the process isolation mode. Slow! -->
    <condition property="processisolation" value="${env.bamboo_processisolation}" else="">
        <isset property="env.bamboo_processisolation"/>
    </condition>

    <!-- Set full dependency cleanup flag  -->
    <condition property="depclean" value="true">
        <isset property="env.bamboo_buildKey"/>
    </condition>


    <!-- High Level Targets START -->

    <extension-point name="main" depends="clean,prepare,install,run,wrap-up"/>

    <target name="clean" depends="clean-cache">
        <delete dir="${builddir}" quiet="true"/>
        <if>
            <equals arg1="${depclean}" arg2="true"/>
            <then>
                <delete file="${basedir}/composer.lock" quiet="true"/>
                <delete dir="${basedir}/vendor" quiet="true"/>
            </then>
        </if>
    </target>

    <target name="clean-cache">
        <for list="${run.env}" param="iterate">
            <sequential>
                <delete dir="${cachedir}/@{iterate}" quiet="true"/>
            </sequential>
        </for>

    </target>

    <extension-point name="prepare" depends="clean"/>

    <extension-point name="install" depends="prepare"/>

    <extension-point name="run" depends="install,run-all-tests"/>

    <extension-point name="run-all-tests"/>

    <extension-point name="wrap-up" depends="run"/>

    <target name="unit-tests" description="Run unit tests."
            depends="clean,prepare-reportdir,install-dependencies,run-unit-tests"/>

    <target name="unit-tests-coverage" description="Run unit tests with code coverage collection enabled."
            depends="clean,prepare-reportdir,install-dependencies,run-unit-tests-with-coverage"/>

    <target name="code-standards" description="Run code standards checks."
            depends="clean,prepare-reportdir,run-code-standards"/>

    <target name="functional-tests" description="Run functional tests."
            depends="clean,prepare,install,install-admin-fixture,run-functional-tests"/>

    <target name="selenium-tests" description="Run Selenium tests."
            depends="clean,prepare,install,install-admin-fixture,install-test-fixtures,run-selenium-tests"/>

    <!-- END High Level Targets -->


    <!-- Create reportdir, otherwise phpcs will complain -->
    <target name="prepare-reportdir" extensionOf="prepare">
        <mkdir dir="${reportdir}"/>
    </target>

    <!-- Create database -->
    <!-- TODO: create separate databases per environment (except dev?) -->
    <target name="prepare-db" extensionOf="prepare">
        <if>
            <equals arg1="${db.type}" arg2="mysql"/>
            <then>
                <echo>Creating ${db.name} database in ${db.type}...</echo>
                <path id="classpath.mysqldriver">
                    <fileset dir="/usr/share/java/">
                        <include name="mysql-connector-java.jar"/>
                        <include name="mysql-connector-java-*.jar"/>
                    </fileset>
                </path>
                <sql driver="com.mysql.jdbc.Driver"
                    classpathref="classpath.mysqldriver"
                    url="jdbc:mysql://${db.host}:${db.port}/"
                    userid="${db.user}"
                    password="${db.pass}"
                    autocommit="true">
                    DROP DATABASE IF EXISTS `${db.name}`;
                    CREATE DATABASE `${db.name}`;
                </sql>
            </then>
            <elseif>
                <!-- TODO: Check if it works -->
                <equals arg1="${db.type}" arg2="pgsql"/>
                <then>
                    <echo>Creating ${db.name} database in ${db.type}...</echo>
                    <path id="classpath.pgsqldriver">
                        <fileset dir="/usr/share/java/">
                            <include name="postgresql-9.3-1103.jdbc41.jar"/>
                            <include name="postgresql-9.3-1101.jdbc41.jar"/>
                            <include name="postgresql-9.3.jdbc41.jar"/>
                            <include name="postgresql-jdbc.jar"/>
                            <include name="postgresql-*.jdbc*.jar"/>
                        </fileset>
                    </path>
                    <exec dir="${basedir}" executable="psql" failonerror="true">
                        <arg line="-h ${db.host} -U postgres -c 'UPDATE pg_database SET datallowconn = TRUE;'" />
                    </exec>
                    <exec dir="${basedir}" executable="psql" failonerror="true">
                        <arg line="-h ${db.host} -U postgres -c 'CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;' -d template0" />
                    </exec>
                    <sql driver="org.postgresql.Driver"
                        classpathref="classpath.pgsqldriver"
                        url="jdbc:postgresql://${db.host}/template0"
                        userid="${db.user}"
                        password="${db.pass}"
                        autocommit="true">
                        DROP DATABASE IF EXISTS "${db.name}";
                        CREATE DATABASE "${db.name}" WITH lc_collate = 'C' template = template0;
                    </sql>
                </then>
            </elseif>
            <else>
            </else>
        </if>
        <echo>${db.name} database successfully created.</echo>
    </target>

    <!-- Installing external dependencies -->
    <target name="install-dependencies" extensionOf="install">
        <exec dir="${basedir}" executable="composer" failonerror="true">
            <arg line="install --prefer-dist --no-dev --optimize-autoloader"/>
        </exec>
        <copy file="${basedir}/composer.lock" todir="${builddir}"/>
    </target>

    <!-- Install app in all environments -->
    <target name="install-app" depends="prepare-db,install-dependencies" if="exists.appdir" unless="${run.noappinstall}" extensionOf="install">
        <for list="${run.env}" param="iterate">
            <sequential>
                <echo>Installing the application for @{iterate} environment...</echo>
                <appconfig env="@{iterate}"/>
                <oroinstall env="@{iterate}"/>
            </sequential>
        </for>
    </target>

    <target name="install-admin-fixture">
        <for list="${run.env}" param="iterate">
            <sequential>
                <exec dir="${basedir}" executable="php" failonerror="true">
                    <arg line="app/console"/>
                    <arg line="doctrine:fixture:load"/>
                    <arg line="--no-debug"/>
                    <arg line="--append"/>
                    <arg line="--no-interaction"/>
                    <arg line="--env=@{iterate}"/>
                    <arg line="--fixtures src/Oro/src/Oro/Bundle/TestFrameworkBundle/Fixtures"/>
                </exec>
            </sequential>
        </for>
    </target>

    <target name="install-test-fixtures">
        <for list="${run.env}" param="iterate">
            <sequential>
                <exec dir="${basedir}" executable="php" failonerror="true">
                    <arg line="app/console"/>
                    <arg line="oro:migration:data:load"/>
                    <arg line="--fixtures-type=demo"/>
                    <arg line="--bundles=AcmeDemoGridBundle"/>
                    <arg line="--env=@{iterate}"/>
                </exec>
            </sequential>
        </for>
    </target>

    <!-- Create an application configuration file -->
    <macrodef name="appconfig">
        <attribute name="env"/>
        <attribute name="database-driver" default="${db.driver}"/>
        <attribute name="database-host" default="${db.host}"/>
        <attribute name="database-port" default="${db.port}"/>
        <attribute name="database-name" default="${db.name}"/>
        <attribute name="database-user" default="${db.user}"/>
        <attribute name="database-password" default="${db.pass}"/>
        <attribute name="mailer-transport" default="smtp"/>
        <attribute name="mailer-host" default="127.0.0.1"/>
        <attribute name="mailer-port" default="null"/>
        <attribute name="mailer-encryption" default="null"/>
        <attribute name="mailer-user" default="null"/>
        <attribute name="mailer-password" default="null"/>
        <attribute name="websocket-bind-address" default="0.0.0.0"/>
        <attribute name="websocket-bind-port" default="8080"/>
        <attribute name="websocket-frontend-host" default="'*'"/>
        <attribute name="websocket-frontend-port" default="8080"/>
        <attribute name="websocket-frontend-path" default=""/>
        <attribute name="websocket-backend-host" default="'*'"/>
        <attribute name="websocket-backend-port" default="8080"/>
        <attribute name="websocket-backend-path" default=""/>
        <attribute name="web-backend-prefix" default="/admin"/>
        <attribute name="session-handler" default="null"/>
        <attribute name="locale" default="en"/>
        <attribute name="secret" default="ThisTokenIsNotSoSecretChangeIt"/>
        <attribute name="installed" default="~"/>
        <attribute name="assets-version" default="~"/>
        <sequential>
            <if>
                <equals arg1="@{env}" arg2="prod"/>
                <then>
                    <var name="appconfig.filename" value="${appdir}/config/parameters.yml"/>
                </then>
                <else>
                    <var name="appconfig.filename" value="${appdir}/config/parameters_@{env}.yml"/>
                </else>
            </if>
            <delete file="${appconfig.filename}" quiet="true"/>
            <echo file="${appconfig.filename}" append="true">parameters:${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    database_driver: @{database-driver}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    database_host: @{database-host}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    database_port: @{database-port}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    database_name: @{database-name}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    database_user: @{database-user}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    database_password: @{database-password}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    mailer_transport: @{mailer-transport}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    mailer_host: @{mailer-host}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    mailer_port: @{mailer-port}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    mailer_encryption: @{mailer-encryption}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    mailer_user: @{mailer-user}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    mailer_password: @{mailer-password}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_bind_address: @{websocket-bind-address}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_bind_port: @{websocket-bind-port}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_frontend_host: @{websocket-frontend-host}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_frontend_port: @{websocket-frontend-port}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_frontend_path: @{websocket-frontend-path}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_backend_host: @{websocket-backend-host}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_backend_port: @{websocket-backend-port}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    websocket_backend_path: @{websocket-backend-path}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    web_backend_prefix: @{web-backend-prefix}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    session_handler: @{session-handler}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    locale: @{locale}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    secret: @{secret}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    installed: @{installed}${line.separator}</echo>
            <echo file="${appconfig.filename}" append="true">    assets_version: @{assets-version}${line.separator}</echo>
        </sequential>
    </macrodef>

    <!-- Install an application with the console installer -->
    <macrodef name="oroinstall">
        <attribute name="env"/>
        <attribute name="user-name" default="admin"/>
        <attribute name="user-email" default="admin@example.com"/>
        <attribute name="user-firstname" default="John"/>
        <attribute name="user-lastname" default="Doe"/>
        <attribute name="user-password" default="admin"/>
        <attribute name="sample-data" default="n"/>
        <attribute name="organization-name" default="Oro Inc."/>
        <sequential>
            <if>
                <equals arg1="@{env}" arg2="prod"/>
                <then>
                    <var name="skipAssets" value=""/>
                </then>
                <else>
                    <var name="skipAssets" value="--skip-assets"/>
                </else>
            </if>
            <exec dir="${basedir}" executable="php" failonerror="true">
                <arg line="app/console oro:install"/>
                <arg line="--env=@{env}"/>
                <arg line="--user-name=@{user-name}"/>
                <arg line="--user-email=&quot;@{user-email}&quot;"/>
                <arg line="--user-firstname=&quot;@{user-firstname}&quot;"/>
                <arg line="--user-lastname=&quot;@{user-lastname}&quot;"/>
                <arg line="--user-password=&quot;@{user-password}&quot;"/>
                <arg line="--sample-data=@{sample-data}"/>
                <arg line="--organization-name=&quot;@{organization-name}&quot;"/>
                <arg line="--no-interaction" />
                <arg line="${skipAssets}" />
            </exec>
        </sequential>
    </macrodef>

    <!-- PHPUnit tests -->
    <macrodef name="phpunit">
        <attribute name="suite" default=""/>
        <attribute name="defaultsuite" default="${testsuite}"/>
        <attribute name="codecoverage" default="false"/>
        <attribute name="processisolation" default="false"/>
        <attribute name="config" default="${testconfig}"/>
        <attribute name="debug" default="${debug}"/>
        <sequential>
            <if>
                <equals arg1="@{codecoverage}" arg2="true"/>
                <then>
                    <var name="phpunit.codecoverage" value="-dxdebug.coverage_enable=1 --coverage-php ${reportdir}/coverage.cov"/>
                </then>
                <else>
                    <var name="phpunit.codecoverage" value="-dxdebug.coverage_enable=0"/>
                </else>
            </if>
            <if>
                <or>
                    <equals arg1="@{processisolation}" arg2="true"/>
                    <equals arg1="${processisolation}" arg2="true"/>
                </or>
                <then>
                    <var name="phpunit.processisolation" value="--process-isolation"/>
                </then>
                <else>
                    <var name="phpunit.processisolation" value=""/>
                </else>
            </if>
            <if>
                <equals arg1="@{debug}" arg2="true"/>
                <then>
                    <var name="phpunit.debug" value="--debug"/>
                </then>
                <else>
                    <var name="phpunit.debug" value=""/>
                </else>
            </if>
            <if>
                <equals arg1="@{suite}" arg2=""/>
                <then>
                    <var name="phpunit.suite" value="@{defaultsuite}"/>
                </then>
                <else>
                    <var name="phpunit.suite" value="@{suite}"/>
                </else>
            </if>

            <!-- Strip enclosing double quotes -->
            <propertyregex property="phpunit.suite" override="true" input="${phpunit.suite}" regexp="^&quot;(.*)&quot;$" replace="\1"/>

            <echo>Test suite &quot;${phpunit.suite}&quot;:</echo><echo/>

            <!-- If phpunit fails because of a Fatal Error, re-run it with process isolation. -->
            <!-- NB: Due to properties immutability if works only for the first phpunit run in the ant script. -->
            <trycatch>
                <try>
                    <exec dir="${basedir}" executable="phpunit" failonerror="true" resultproperty="phpunit.exitcode">
                        <arg line="-c @{config}"/>
                        <arg value="-dxdebug.default_enable=0"/>
                        <arg value="--verbose"/>
                        <arg value="--stderr"/>
                        <arg value="${phpunit.processisolation}"/>
                        <arg value="${phpunit.debug}"/>
                        <arg line="--log-junit ${reportdir}/phpunit.xml"/>
                        <arg line="--testsuite &quot;${phpunit.suite}&quot;"/>
                        <arg line="${phpunit.codecoverage}"/>
                        <arg value="${testpath}"/>
                    </exec>
                </try>
                <catch>
                    <if>
                        <and>
                            <not>
                                <or>
                                    <!-- Exit code 1 means normal phpunit completion with failing tests). -->
                                    <equals arg1="${phpunit.exitcode}" arg2="1"/>
                                    <!-- Exit code 2 means normal phpunit completion (with exceptions). -->
                                    <equals arg1="${phpunit.exitcode}" arg2="2"/>
                                    <!-- A different exit code is most likely because of a fatal or parse error. -->
                                </or>
                            </not>
                            <!-- Not running the second time, if first time was with process isolation already. -->
                            <equals arg1="${phpunit.processisolation}" arg2=""/>
                        </and>
                        <then>
                            <echo/><echo>================================================================</echo><echo/>
                            <echo>PHPUnit returned ${phpunit.exitcode}, is it a Fatal Error?</echo><echo/>
                            <echo>Re-running PHPUnit test suite in process-isolation mode:</echo>
                            <echo/><echo>================================================================</echo><echo/>
                            <exec dir="${basedir}" executable="phpunit" failonerror="true">
                                <arg line="-c @{config}"/>
                                <arg value="-dxdebug.default_enable=0"/>
                                <arg value="--verbose"/>
                                <arg value="--stderr"/>
                                <!-- Use process isolation -->
                                <arg value="--process-isolation"/>
                                <arg value="${phpunit.debug}"/>
                                <arg line="--log-junit ${reportdir}/phpunit.xml"/>
                                <arg line="--testsuite &quot;${phpunit.suite}&quot;"/>
                                <arg line="${phpunit.codecoverage}"/>
                                <arg value="${testpath}"/>
                            </exec>
                        </then>
                    </if>
                    <fail message="PHPUnit tests failed."/>
                </catch>
            </trycatch>
        </sequential>
    </macrodef>

    <target name="run-unit-tests-with-coverage">
        <phpunit codecoverage="true" suite="${testsuite}" defaultsuite="Project Unit Tests"/>
    </target>

    <target name="run-unit-tests" extensionOf="run-all-tests">
        <phpunit suite="${testsuite}" defaultsuite="Project Unit Tests"/>
    </target>

    <target name="run-functional-tests" extensionOf="run-all-tests">
        <phpunit suite="${testsuite}" defaultsuite="Project Functional Tests"/>
    </target>

    <target name="run-selenium-tests" extensionOf="run-all-tests">
        <phpunit suite="${testsuite}" defaultsuite="Project Selenium Tests"/>
    </target>

    <!-- Check code standards -->
    <target name="run-code-standards" depends="run-phpcs,run-phpcpd,run-phpmd" extensionOf="run-all-tests">
        <!--<parallel>
            <antcall target="run-phpcs"/>
            <antcall target="run-phpmd"/>
            <antcall target="run-phpcpd"/>
        </parallel>-->
    </target>

    <target name="run-phpcs">
        <exec dir="${basedir}" executable="phpcs" failonerror="true">
            <arg line="--encoding=utf-8 --extensions=php --standard=${confdir}/phpcs.xml --report=junit
                      --report-file=${reportdir}/phpcs.xml ${srcdir}"/>
        </exec>
    </target>

    <target name="run-phpmd">
        <exec dir="${basedir}" executable="phpmd" failonerror="true">
            <arg line="${srcdir} xml ${confdir}/phpmd.xml --reportfile ${reportdir}/phpmd.xml"/>
        </exec>
    </target>

    <target name="run-phpcpd">
        <exec dir="${basedir}" executable="phpcpd" failonerror="true">
            <arg line="--min-lines 25 --log-pmd ${reportdir}/phpcpd.xml --verbose"/>
            <arg line="--exclude=CustomerBundle/Migrations/Schema"/>
            <arg line="--exclude=PaymentBundle/Migrations/Schema"/>
            <arg line="--exclude=PayPalBundle/Migrations/Schema"/>
            <arg line="--exclude=PricingBundle/Migrations/Schema"/>
            <arg line="--exclude=ProductBundle/Migrations/Schema"/>
            <arg line="--exclude=RFPBundle/Migrations/Schema"/>
            <arg line="--exclude=SaleBundle/Migrations/Schema"/>
            <arg line="--exclude=OrderBundle/Migrations/Schema"/>
            <arg line="--exclude=InvoiceBundle/Migrations/Schema"/>
            <arg line="--exclude=ShoppingListBundle/Migrations/Schema"/>
            <arg line="--exclude=WebsiteBundle/Migrations/Schema"/>
            <arg line="--exclude=CatalogBundle/Migrations/Schema"/>
            <arg line="--exclude=CMSBundle/Migrations/Schema"/>
            <arg line="--exclude=WarehouseBundle/Migrations/Schema"/>
            <arg line="--exclude=TaxBundle/Migrations/Schema"/>
            <arg line="--exclude=CheckoutBundle/Migrations/Schema"/>
            <arg line="--exclude=AlternativeCheckoutBundle/Migrations/Schema"/>
            <arg line="--exclude=ShippingBundle/Migrations/Schema"/>
            <arg line="--exclude=SaleBundle/Entity"/>
            <arg line="--exclude=RFPBundle/Entity"/>
            <arg line="--exclude=AlternativeCheckoutBundle/Entity"/>
            <arg line="${srcdir}"/>
        </exec>
    </target>

    <!-- Check build on errors and warnings -->
    <target name="check_php_errors_and_warnings">
        <exec dir="${confdir}" executable="./check_errors_on_build.sh" failonerror="true">
            <arg line="-p ${appdir}/logs/prod.log"/>
        </exec>
    </target>
    <!-- End Check build on errors and warnings -->
</project>
