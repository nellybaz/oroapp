{% block __oro_datagrid_server_render__datagrid_widget %}
    {% set datagrid = oro_datagrid_build(grid_name, grid_parameters) %}

    {% set gridId = oro_datagrid_generate_element_id(datagrid) %}

    {% set renderParams = grid_render_parameters %}

    {% set attr = attr|merge({
        id: gridId
    }) %}

    {% set gridClass = attr.class|default('') %}
    {% set gridClass = renderParams.cssClass is defined ? gridClass ~ ' ' ~ renderParams.cssClass : gridClass %}
    {% if gridClass %}
        {% set attr = attr|merge({
            class: gridClass
        }) %}
    {% endif %}

    {% set datagridData = oro_datagrid_data(datagrid) %}

    {% set datagridData = datagridData|merge({
        backendGrid: true
    }) %}

    {% set datagridMetaData = oro_datagrid_metadata(datagrid) %}

    {% set datagridMetaData = datagridMetaData|merge({
        GridView: 'productServerRenderGrid',
        PageableCollection: 'productPageableCollection'
    })%}

    {% set datagridMetaData = datagridMetaData|merge({
        GridView: 'productServerRenderGrid',
        PageableCollection: 'productPageableCollection',
        options: datagridMetaData.options|merge({
            multiSelectRowEnabled: renderParams.multiSelectRowEnabled is defined ? renderParams.multiSelectRowEnabled : false,
        })
    })%}

    {% set toolbarOptions = datagridMetaData.options.toolbarOptions %}

    {% do block[id ~ '_toolbar']|merge_context({'datagrid': datagrid}) %}
    {% do block[id ~ '_header_row']|merge_context({'datagrid': datagrid}) %}

    {% set enableFilters = renderParams.enableFilters is defined ? renderParams.enableFilters : true %}

    {% set options  = {
        el: '#' ~ gridId,
        gridName: oro_datagrid_build_fullname(datagrid.name, datagrid.scope),
        builders: datagridMetaData.requireJSModules,
        metadata: datagridMetaData,
        data: datagridData,
        enableFilters: enableFilters,
        enableToggleFilters: renderParams.enableToggleFilters is defined ? renderParams.enableToggleFilters : false,
        filterContainerSelector: renderParams.filterContainerSelector is defined ? renderParams.filterContainerSelector : null,
        filtersStateElement: renderParams.filtersStateElement is defined ? renderParams.filtersStateElement : null,
        enableViews: renderParams.enableViews is defined ? renderParams.enableViews : enableFilters,
        showViewsInNavbar: renderParams.showViewsInNavbar is defined ? renderParams.showViewsInNavbar : false,
        inputName: oro_datagrid_build_inputname(datagrid.name),
        themeOptions: themeOptions|default({}),
        toolbarOptions: renderParams.toolbarOptions|default({}),
        gridMainContainer: '.oro-datagrid'
    } %}

    <div id="{{ gridId }}"
         data-page-component-module="oroproduct/js/app/datagrid/backend-datagrid-component"
         data-server-render=""
         data-page-component-name="{{ options.gridName }}"
         data-page-component-options="{{ options|json_encode }}"
         data-server-render
         data-layout="separate"
            {% if renderParams.cssClass is defined %} class="{{ renderParams.cssClass }}" {% endif %}
    >
        <div class="oro-datagrid"
             data-skip-input-widgets
             data-layout="separate"
        >

            {% if toolbarOptions.placement.top %}
                <div class="toolbar">
                    {{ block_widget(block[id ~ '_toolbar'],{attr: {'data-grid-toolbar': 'top'}}) }}
                </div>
            {% endif %}

            <div class="other-scroll-container">
                <div class="other-scroll"></div>
                {% if themeOptions.disableGridScrollbar is not defined or themeOptions.disableGridScrollbar == false %}
                    <div class="grid-scrollable-container">
                {% endif %}
                    <div class="grid-container">
                        <div class="grid table-hover table table-bordered table-condensed">
                            {% if themeOptions.headerHide is not defined or themeOptions.headerHide == false %}
                                <div class="grid-header">
                                    {{ block_widget(block[id ~ '_header_row']) }}
                                </div>
                            {% endif %}
                            {{ block_widget(block[id ~ '_category_product_list'], {
                                'datagridData': datagridData,
                                'themeOptions': themeOptions,
                                'block'       : block,
                                'id'          : id
                            }) }}

                            <div class="grid-footer"></div>
                        </div>
                    </div>
                {% if themeOptions.disableGridScrollbar is not defined or themeOptions.disableGridScrollbar == false %}
                    </div>
                {% endif %}
                <div class="no-data"></div>
            </div>

            {% if toolbarOptions.placement.bottom %}
                <div class="toolbar dropup-area">
                    {{ block_widget(block[id ~ '_toolbar'], {attr: {'data-grid-toolbar':'bottom'}}) }}
                </div>
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block __oro_datagrid_server_render__datagrid_header_row_widget %}
    {% set attr = attr|merge({
        class: attr.class|default('') ~ " grid-header-row"
    }) %}

    <div{{ block('block_attributes') }}>
        {% for child in block if child.vars.visible -%}
            {{ block_widget(child) }}
        {%- endfor %}
    </div>
{% endblock %}

{% block __oro_datagrid_server_render__datagrid_header_cell_widget %}
    {% set columnAttributes = oro_datagrid_column_attributes(datagrid, column_name) %}

    {% set columnClass = " grid-cell grid-header-cell grid-header-cell-" ~ column_name ~ " " ~columnAttributes.type ~ "-cell" %}
    {% if columnAttributes.sortable is defined and columnAttributes.sortable %}
        {% set columnClass = columnClass ~ " sortable" %}
    {% endif %}

    {% if columnAttributes.renderable is defined and columnAttributes.renderable %}
        {% set columnClass = columnClass ~ " renderable" %}
    {% endif %}

    {% set attr = attr|merge({
        class: attr.class|default('') ~ columnClass
    }) %}

    <div{{ block('block_attributes') }}>
        {% if columnAttributes.sortable is defined and columnAttributes.sortable %}
            <a class="grid-header-cell__link" href="#">
                <span class="grid-header-cell__label">{{ columnAttributes.label }}</span>
                <span class="caret"></span>
            </a>
        {% else %}
            <span class="grid-header-cell__label">
                {{ columnAttributes.label }}
            </span>
        {% endif %}
    </div>
{% endblock %}

{% block __oro_datagrid_server_render__datagrid_row_widget %}
    {% set attr = attr|merge({
        class: attr.class|default('') ~ " grid-row",
        'data-row-id': datagrid_row.id,
        'data-layout': 'separate',
        'data-page-component-view': {
            view: 'oroproduct/js/app/datagrid/datagrid-product-lazy-init-view'
        }
    }) %}

    <div{{ block('block_attributes') }}>
        {% for child in block if child.vars.visible -%}
            {{ block_widget(child) }}
        {%- endfor %}
    </div>
{% endblock %}

{% block __oro_datagrid_server_render__datagrid_cell_widget %}
    {% for child in block if child.vars.visible -%}
        {{ block_widget(child) }}
    {%- endfor %}
{% endblock %}

{%- block __oro_datagrid_server_render__datagrid_cell_value_widget -%}
    {{ datagrid_row[column_name] }}
{%- endblock -%}

{% block _product_datagrid_category_product_list_widget %}
    <div class="{{ themeOptions.bodyClassName }}">
        {% for datagrid_row in datagridData.data %}
            {% set child = block[id ~'_row'] %}

            {% set childAttr = layout_attr_defaults(child.vars.attr, {
                'class': themeOptions.rowClassName
            }) %}
            {% set childAttr = layout_attr_defaults(childAttr, themeOptions.rowAttributes) %}

            {% do child|merge_context({
                'datagrid_row': datagrid_row,
                'themeOptions': themeOptions
            }) %}
            {{ block_widget(child, {'attr': childAttr}) }}
        {% endfor %}
    </div>
{% endblock %}
