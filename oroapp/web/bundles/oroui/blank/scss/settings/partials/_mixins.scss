// @theme: blank;

@mixin after() {
    content: '';

    position: absolute;

    display: block;
}

// Ellipsis text
@mixin ellipsis() {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

// Helper to clear inner floats
@mixin clearfix() {
    &::after {
        content: '';

        display: block;

        clear: both;
    }
}

// Helper for reset default styles of lists
@mixin list-normalize() {
    list-style: none;
    margin: 0;
    padding: 0;
}

// Use: @include breakpoint('desktop') {
//  content
//}
@mixin breakpoint($type) {
    // $breakpoints - global variable;

    @if (length($breakpoints) > 0) {
        @if (map-has-key($breakpoints, $type) and map-get($breakpoints, $type)) {
            @media #{map-get($breakpoints, $type)} {
                @content;
            }
        } @else {
            @warn 'Absent breakpoint type: ' + $type;
        }
    }
}

// Use: @include font-face('Lato', '../fonts/lato/lato-regular-webfont', 400, normal);
@mixin font-face($font-family, $file-path, $font-weight, $font-style) {
    @font-face {
        font-family: $font-family;
        src: url('#{$file-path}.eot');
        src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
        url('#{$file-path}.woff') format('woff'),
        url('#{$file-path}.ttf') format('truetype'),
        url('#{$file-path}.svg##{$font-family}') format('svg');
        font-weight: $font-weight;
        font-style: $font-style;
    }
    // Chrome for Windows rendering fix: http://www.adtrak.co.uk/blog/font-face-chrome-rendering/
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
        @font-face {
            font-family: $font-family;
            src: url('#{$file-path}.svg##{$font-family}') format('svg');
        }
    }
}

// Parse list with $fonts and call Mixin font-face();
// $fonts: (
//     'main': (
//         'family': 'Test1',
//         'variants': (
//             (
//                 'path': '...',
//                 'weight': normal,
//                 'style': normal
//             ),
//             (
//                 'path': '..',
//                 'weight': 700,
//                 'style': normal
//             )
//         ),
//     ),
//     'secondary': (
//         'family': 'Test2',
//         'variants': (
//             (
//                 'path': '...',
//             )
//         )
//     )
// );
// Use: @include use-font-face($fonts);
@mixin use-font-face($fonts: ()) {
    // Iterate index;
    $font-index: 0;

    // List with section keys
    // ('main', 'secondary', 'icon')
    $font-names: map_keys($fonts);

    @mixin include-font-face($font-family, $file-path, $font-weigh, $font-style) {
        @if ($font-family and $file-path) {
            // Calling mixin font-face(family, path, $weigh, style);
            @include font-face($font-family, $file-path, $font-weigh, $font-style);
        } @else {
            @warn 'Absent family or path keys in a list.';
        }
    }

    @if (length($fonts) >= 1) {
        @each $font in $fonts {
            $font-index: $font-index + 1;

            // Iterate section name
            // 'main' or 'secondary' or 'icon' or '...'
            $current-section-name: nth($font-names, $font-index);

            // Iterate section
            // (
            //    'family': '...',
            //    'variants': (
            //       (
            //            'path': '...',
            //            'weight': normal,
            //            'style': normal
            //        )
            //     )
            //  )
            $current-section: map_get($fonts, $current-section-name);

            // Iterate 'variants' section
            // (
            //     (
            //         'path': '...',
            //         'weight': normal,
            //         'style': normal
            //     )
            // )

            // Iterate font variants
            $font-variants: map_get($current-section, 'variants');

            @if (type-of($font-variants) == 'map' or type-of($font-variants) == 'list') {
                // Get Iterate section 'family'
                $font-family: map_get($current-section, 'family');

                // Default value
                $file-path: null;

                // Default value
                $font-weigh: normal;

                // Default value
                $font-style: normal;

                @if (type-of($font-variants) == 'map') {
                    $file-path: map_get($font-variants, 'path');

                    // Sections 'variants' and 'style' not required.
                    // Update only if They are defined in iterate  section.
                    @if (map_has_key($font-variants, 'weight')) {
                        $font-weigh: map_get($font-variants, 'weight');
                    }
                    @if (map_has_key($font-variants, 'style')) {
                        $font-style: map_get($font-variants, 'style');
                    }

                    @include include-font-face($font-family, $file-path, $font-weigh, $font-style);
                }

                @if (type-of($font-variants) == 'list') {
                    @each $font-variant in $font-variants {
                        $file-path: map_get($font-variant, 'path');

                        // Sections 'variants' and 'style' not required.
                        // Update only if They are defined in iterate  section.
                        @if (map_has_key($font-variant, 'weight')) {
                            $font-weigh: map_get($font-variant, 'weight');
                        }
                        @if (map_has_key($font-variants, 'style')) {
                            $font-style: map_get($font-variant, 'style');
                        }

                        @include include-font-face($font-family, $file-path, $font-weigh, $font-style);
                    }
                }
            } @else {
                @warn 'Section "variants" should be of a "map" or "list" type.';
            }
        }
    }
}

// Check devices on server, if device is desktop added class to body (.desktop-version)
@mixin only-desktop {
    @include breakpoint('desktop') {
        .desktop-version {
            @content;
        }
    }
}

// Check devices on server, if device is mobile added class to body (.mobile-version)
@mixin only-mobile {
    .mobile-version {
        @content;
    }
}

// Wrap element
@mixin fullscreen-mode {
    @at-root {
        .fullscreen-mode {
            @content;
        }
    }
}

// Disable platform styles for input search
@mixin disable-search-styles($input) {
    #{$input}::-webkit-search-decoration,
    #{$input}::-webkit-search-cancel-button,
    #{$input}::-webkit-search-results-button,
    #{$input}::-webkit-search-results-decoration {
        display: none;
    }
}

// Maintain an elements aspect ratio, even as it scales
// $width and $height arguments for aspect ratio
// $content selector for inner content block
// $position [static|relative|absolute|fixed]
@mixin aspect-ratio($width: 1, $height: 1, $content: null, $position: relative) {
    position: $position;

    &:before {
        content: '';

        display: block;
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }

    @if $content != null {
        > #{$content} {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }
    }
}

@mixin element-state($state) {
    @if $state == 'active' {
        &:active {
            @content;
        }
    }

    @else if $state == 'hover' {
        &:hover {
            @content;
        }
    }

    @else if $state == 'visited' {
        &--visited,
        &:visited {
            @content;
        }
    }

    @else if $state == 'focus' {
        &--focus,
        &:focus {
            @content;
        }
    }

    @else if $state == 'warning' {
        &--warning,
        &.warning {
            @content;
        }
    }

    @else if $state == 'success' {
        &--success,
        &.success {
            @content;
        }
    }

    @else if $state == 'error' {
        &--error,
        &.error {
            @content;
        }
    }

    @else if $state == 'disabled' {
        &--disabled,
        &.disabled,
        &:disabled {
            @content;
        }
    }
}

// Set inner offset from the edges to include the safe-area
// iPhone X
// Use like native padding
// Ex. @include safe-area-offset(padding, 10px 15px);
// Ex. @include safe-area-offset(margin, 10px 15px 20px);
@mixin safe-area-offset($property, $values) {
    @if ($property != null and $values != null and length($values) <= 4) {
        $safe-area-offset-left: 0;
        $safe-area-offset-right: 0;

        #{$property}: #{$values};

        @if ($enable-safe-area) {
            @if (length($values) == 1) {
                $safe-area-offset-left: nth($values, 1);
                $safe-area-offset-right: nth($values, 1);
            } @else if (length($values) == 2 or length($values) == 3) {
                $safe-area-offset-left: nth($values, 2);
                $safe-area-offset-right: nth($values, 2);
            } @else if (length($values) == 4) {
                $safe-area-offset-left: nth($values, 4);
                $safe-area-offset-right: nth($values, 2);
            }

            @include safe-area-property-left(#{$property}-left, $safe-area-offset-left, false);
            @include safe-area-property-right(#{$property}-right, $safe-area-offset-right, false);
        }
    } @else if (length($values) > 4) {
        @warn 'Incorrect arguments of mixin';
    }
}

// Set any property with left safe-area zone
@mixin safe-area-property-left($property, $value: 0px, $default: true) {
    @if ($property != null or $value != null) {
        @if ($default) {
            #{$property}: #{$value};
        }

        @if ($enable-safe-area) {
            @if (strip-units($value) == 0) {
                /* iOS 11 */
                #{$property}: constant(safe-area-inset-left);

                /* iOS 11.2+ */
                #{$property}: env(safe-area-inset-left);
            } @else {
                /* iOS 11 */
                #{$property}: calc(constant(safe-area-inset-left) + #{$value});

                /* iOS 11.2+ */
                #{$property}: calc(env(safe-area-inset-left) + #{$value});
            }
        }
    }
}

// Set any property with right safe-area zone
@mixin safe-area-property-right($property, $value: 0px, $default: true) {
    @if ($property != null or $value != null) {
        @if ($default) {
            #{$property}: #{$value};
        }

        @if ($enable-safe-area) {
            @if (strip-units($value) == 0) {
                /* iOS 11 */
                #{$property}: constant(safe-area-inset-right);

                /* iOS 11.2+ */
                #{$property}: env(safe-area-inset-right);
            } @else {
                /* iOS 11 */
                #{$property}: calc(constant(safe-area-inset-right) + #{$value});

                /* iOS 11.2+ */
                #{$property}: calc(env(safe-area-inset-right) + #{$value});
            }
        }
    }
}

@import 'mixins-for-components';
