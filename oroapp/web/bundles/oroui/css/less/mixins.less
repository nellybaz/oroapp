@import "bowerassets/bootstrap/less/variables";
@import "bowerassets/bootstrap/less/mixins";

@import "variables";

.box-sizing(@sizing: content-box ) {
  -webkit-box-sizing: @sizing;
  -moz-box-sizing: @sizing;
  box-sizing: @sizing;
}

.forScreen (@size; background; @value: none) {
  @media only screen and (max-width: @size) {
    background: @value;
  }
}
.forScreen (@size; float; @value: none) {
  @media only screen and (max-width: @size) {
    float: @value;
  }
}
.forScreen (@size; width; @value: 100%) {
  @media only screen and (max-width: @size) {
    width: @value;
  }
}
.forScreen (@size; height; @value: auto) {
  @media only screen and (max-width: @size) {
    height: @value;
  }
}
.forScreen (@size; min-height; @value: initial) {
  @media only screen and (max-width: @size) {
    min-height: @value;
  }
}
.forScreen (@size; margin; @value: 0) {
  @media only screen and (max-width: @size) {
    margin: @value;
  }
}
.forScreen (@size; padding; @value: 0) {
  @media only screen and (max-width: @size) {
    padding: @value;
  }
}
.forScreen (@size; padding-right; @value: 0) {
  @media only screen and (max-width: @size) {
    padding-right: @value;
  }
}
.forScreen (@size; border-top-width; @value: 0) {
  @media only screen and (max-width: @size) {
    border-top-width: @value;
  }
}
.forScreen (@size; display; @value: block) {
  @media only screen and (max-width: @size) {
    display: @value;
  }
}
.forScreen (@size; @_; @value) {}

.cursor (grab) {
  cursor: url(../../../oroui/img/cursor/grab.cur), move;
  cursor: -webkit-grab;
  cursor: -moz-grab;
}
.cursor (grabbing) {
  cursor: url(../../../oroui/img/cursor/grabbing.cur), move;
  cursor: -webkit-grabbing;
  cursor: -moz-grabbing;
}

#accordion {
  .toggle () {
    font-weight: bold;
    padding-left: 15px;
    background: @accordionHeadingBackgroundColor;
    border-bottom: 1px solid darken(@accordionHeadingBackgroundColor, 5%);
    border-top: 1px solid lighten(@accordionHeadingBackgroundColor, 5%);
  }
  .toggle-before () {
    content: "\f0d7";
    font-family: FontAwesome;
    margin: 0 7px 0 -7px;
    width: 10px;
    display: inline-block;
  }
  .toggle-collapsed-before () {
    content: "\f0da";
    margin: 0 5px 0 -5px;
  }
  .group () {
    .border-radius(0);
    margin-bottom: 0;
    border: none;
  }
}

.horizontal-icon-menu () {
  .dropdown-menu {
    padding: 0;
    right: 100%;
    left: auto;
    top: -10px;
    > li {
      display: table-cell;
    }
    .nav.launchers-list {
      padding: 0;
      > li:first-child > a{
        margin-left: 2px;
      }
    }
  }
}

.open () {
  // IE7's z-index only goes to the nearest positioned ancestor, which would
  // make the menu appear below buttons that appeared later on the page
  *z-index: @zindexDropdown;

  & > .dropdown-menu {
    display: block;
  }
}

.load-more-items(@borderColor: #e5e5e5, @backgroundColor: #fff, @color: #888) {
  background-color: @backgroundColor;
  position: relative;
  text-align: center;
  cursor: pointer;
  .load-more-label {
    position: relative;
    z-index: 1;
    display: inline;
    color: @color;
    background-color: @backgroundColor;
    padding: 0 5px;
  }
  &:before, &:after {
    content: '';
    position: absolute;
    display: block;
    border-bottom: 1px solid @borderColor;
    width: 100%;
  }
  &:before {
    top: calc(~"25% + 1px");
  }
  &:after {
    bottom: calc(~"25% + 1px");
  }
}

.process(@loadingImagePath: '../../img/loader-16.gif') {
  position: relative;
  &:after {
    content: '';
    background: transparent url(@loadingImagePath) no-repeat center left;
    position: absolute;
    width: 12px;
    height: 12px;
    background-size: 12px 12px;
    right: -20px;
    top: 50%;
    margin-top: -6px;
  }
}

.inline-actions-element-outline(@color, @width: 2px) {
  box-shadow: 0 0 0 @width @color;
}

#floating-validation-message() {
  display: block;
  position: relative;
  z-index: 1;
  width: auto;
  height: 0;
  margin: 0;
  &:before {
    content: normal;
  }
  &:after {
    content: '';
    display: block;
    position: absolute;
    top: 100%;
    margin-top: -38px;
    left: 10px;
    border-style: solid;
    border-color: lighten(@errorText, 20%) transparent;
    border-width: 8px 4px 0;
  }
  > span {
    position: fixed;
    width: @widthInput;
    margin-top: -37px;
    > span {
      position: absolute;
      bottom: 0;
      padding: 5px 5px 5px 20px;
      border-radius: 4px;
      background-color: @errorMessageBalloonBackground;
      color: white;
    }
    > span:before {
      content: "\f00d";
      display: inline-block;
      width: 14px;
      margin-left: -14px;
      color: white;
      font: normal 1.15em/1em 'FontAwesome';
    }
  }
}

.text-line-truncate(@width: 100%) {
  width: @width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.clearfix-box() {
  &:after {
    display: block;
    width: 100%;
    content: '';
    clear: both;
  }
}

.safe-area-padding(@trbl) {
  padding: @trbl;

  .safe-area-padding-left(@trbl);
  .safe-area-padding-right(@trbl);
}

.safe-area-padding(@tb, @lr) {
  padding: @tb @lr;

  .safe-area-padding-left(@lr);
  .safe-area-padding-right(@lr);
}

.safe-area-padding(@top, @lr, @bottom) {
  padding: @top @lr @bottom;

  .safe-area-padding-left(@lr);
  .safe-area-padding-right(@lr);
}

.safe-area-padding(@top, @right, @bottom, @left) {
  padding: @top @right @bottom @left;

  .safe-area-padding-left(@left);
  .safe-area-padding-right(@right);
}

.safe-area-padding-left(@value) when not (@value = 0) {
  /* iOS 11 */
  padding-left: calc(constant(safe-area-inset-left) + @value);

  /* iOS 11.2+ */
  padding-left: calc(env(safe-area-inset-left) + @value);
}

.safe-area-padding-left(@value) when (@value = 0) {
  /* iOS 11 */
  padding-left: constant(safe-area-inset-left);

  /* iOS 11.2+ */
  padding-left: env(safe-area-inset-left);
}

.safe-area-padding-right(@value) when not (@value = 0) {
  /* iOS 11 */
  padding-right: calc(constant(safe-area-inset-right) + @value);

  /* iOS 11.2+ */
  padding-right: calc(env(safe-area-inset-right) + @value);
}

.safe-area-padding-right(@value) when (@value = 0) {
  /* iOS 11 */
  padding-right: constant(safe-area-inset-right);

  /* iOS 11.2+ */
  padding-right: env(safe-area-inset-right);
}

