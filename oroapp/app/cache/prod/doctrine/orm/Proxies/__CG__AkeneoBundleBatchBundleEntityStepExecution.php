<?php

namespace Proxies\__CG__\Akeneo\Bundle\BatchBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StepExecution extends \Akeneo\Bundle\BatchBundle\Entity\StepExecution implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'id', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'jobExecution', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'stepName', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'status', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'readCount', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'writeCount', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'filterCount', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'startTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'endTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'executionContext', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'exitStatus', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'exitCode', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'exitDescription', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'terminateOnly', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'failureExceptions', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'errors', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'warnings', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'summary'];
        }

        return ['__isInitialized__', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'id', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'jobExecution', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'stepName', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'status', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'readCount', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'writeCount', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'filterCount', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'startTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'endTime', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'executionContext', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'exitStatus', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'exitCode', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'exitDescription', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'terminateOnly', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'failureExceptions', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'errors', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'warnings', '' . "\0" . 'Akeneo\\Bundle\\BatchBundle\\Entity\\StepExecution' . "\0" . 'summary'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StepExecution $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getExecutionContext()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExecutionContext', []);

        return parent::getExecutionContext();
    }

    /**
     * {@inheritDoc}
     */
    public function setExecutionContext(\Akeneo\Bundle\BatchBundle\Item\ExecutionContext $executionContext)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExecutionContext', [$executionContext]);

        return parent::setExecutionContext($executionContext);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndTime', []);

        return parent::getEndTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndTime(\DateTime $endTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndTime', [$endTime]);

        return parent::setEndTime($endTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getReadCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReadCount', []);

        return parent::getReadCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setReadCount($readCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReadCount', [$readCount]);

        return parent::setReadCount($readCount);
    }

    /**
     * {@inheritDoc}
     */
    public function incrementReadCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementReadCount', []);

        return parent::incrementReadCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getWriteCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWriteCount', []);

        return parent::getWriteCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setWriteCount($writeCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWriteCount', [$writeCount]);

        return parent::setWriteCount($writeCount);
    }

    /**
     * {@inheritDoc}
     */
    public function incrementWriteCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementWriteCount', []);

        return parent::incrementWriteCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getFilterCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFilterCount', []);

        return parent::getFilterCount();
    }

    /**
     * {@inheritDoc}
     */
    public function isTerminateOnly()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTerminateOnly', []);

        return parent::isTerminateOnly();
    }

    /**
     * {@inheritDoc}
     */
    public function setTerminateOnly()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTerminateOnly', []);

        return parent::setTerminateOnly();
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTime', []);

        return parent::getStartTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartTime(\DateTime $startTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartTime', [$startTime]);

        return parent::setStartTime($startTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(\Akeneo\Bundle\BatchBundle\Job\BatchStatus $status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function upgradeStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upgradeStatus', [$status]);

        return parent::upgradeStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStepName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStepName', []);

        return parent::getStepName();
    }

    /**
     * {@inheritDoc}
     */
    public function setExitStatus(\Akeneo\Bundle\BatchBundle\Job\ExitStatus $exitStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExitStatus', [$exitStatus]);

        return parent::setExitStatus($exitStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getExitStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExitStatus', []);

        return parent::getExitStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getJobExecution()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJobExecution', []);

        return parent::getJobExecution();
    }

    /**
     * {@inheritDoc}
     */
    public function getFailureExceptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFailureExceptions', []);

        return parent::getFailureExceptions();
    }

    /**
     * {@inheritDoc}
     */
    public function addFailureException(\Exception $e)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFailureException', [$e]);

        return parent::addFailureException($e);
    }

    /**
     * {@inheritDoc}
     */
    public function getFailureExceptionMessages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFailureExceptionMessages', []);

        return parent::getFailureExceptionMessages();
    }

    /**
     * {@inheritDoc}
     */
    public function addError($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addError', [$message]);

        return parent::addError($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getErrors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrors', []);

        return parent::getErrors();
    }

    /**
     * {@inheritDoc}
     */
    public function addWarning($name, $reason, array $reasonParameters, $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addWarning', [$name, $reason, $reasonParameters, $item]);

        return parent::addWarning($name, $reason, $reasonParameters, $item);
    }

    /**
     * {@inheritDoc}
     */
    public function getWarnings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWarnings', []);

        return parent::getWarnings();
    }

    /**
     * {@inheritDoc}
     */
    public function addSummaryInfo($key, $info)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSummaryInfo', [$key, $info]);

        return parent::addSummaryInfo($key, $info);
    }

    /**
     * {@inheritDoc}
     */
    public function incrementSummaryInfo($key, $increment = 1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementSummaryInfo', [$key, $increment]);

        return parent::incrementSummaryInfo($key, $increment);
    }

    /**
     * {@inheritDoc}
     */
    public function getSummaryInfo($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSummaryInfo', [$key]);

        return parent::getSummaryInfo($key);
    }

    /**
     * {@inheritDoc}
     */
    public function setSummary($summary)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSummary', [$summary]);

        return parent::setSummary($summary);
    }

    /**
     * {@inheritDoc}
     */
    public function getSummary()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSummary', []);

        return parent::getSummary();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
