<?php

namespace Proxies\__CG__\Oro\Bundle\WebCatalogBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ContentNode extends \Oro\Bundle\WebCatalogBundle\Entity\ContentNode implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'parentNode', 'childNodes', 'parentScopeUsed', 'rewriteVariantTitle', 'titles', 'scopes', 'contentVariants', 'materializedPath', 'webCatalog', 'localizedUrls', 'serialized_data', 'metaTitles', 'metaKeywords', 'metaDescriptions', 'left', 'level', 'right', 'root', 'createdAt', 'updatedAt', 'updatedAtSet', 'slugPrototypesWithRedirect', 'slugPrototypes'];
        }

        return ['__isInitialized__', 'id', 'parentNode', 'childNodes', 'parentScopeUsed', 'rewriteVariantTitle', 'titles', 'scopes', 'contentVariants', 'materializedPath', 'webCatalog', 'localizedUrls', 'serialized_data', 'metaTitles', 'metaKeywords', 'metaDescriptions', 'left', 'level', 'right', 'root', 'createdAt', 'updatedAt', 'updatedAtSet', 'slugPrototypesWithRedirect', 'slugPrototypes'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ContentNode $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentNode', []);

        return parent::getParentNode();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentNode(\Oro\Bundle\WebCatalogBundle\Entity\ContentNode $parentNode = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentNode', [$parentNode]);

        return parent::setParentNode($parentNode);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildNodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildNodes', []);

        return parent::getChildNodes();
    }

    /**
     * {@inheritDoc}
     */
    public function addChildNode(\Oro\Bundle\WebCatalogBundle\Entity\ContentNode $node)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChildNode', [$node]);

        return parent::addChildNode($node);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChildNode(\Oro\Bundle\WebCatalogBundle\Entity\ContentNode $node)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChildNode', [$node]);

        return parent::removeChildNode($node);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitles', []);

        return parent::getTitles();
    }

    /**
     * {@inheritDoc}
     */
    public function addTitle(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTitle', [$title]);

        return parent::addTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTitle(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTitle', [$title]);

        return parent::removeTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getScopes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScopes', []);

        return parent::getScopes();
    }

    /**
     * {@inheritDoc}
     */
    public function addScope(\Oro\Bundle\ScopeBundle\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addScope', [$scope]);

        return parent::addScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function removeScope(\Oro\Bundle\ScopeBundle\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeScope', [$scope]);

        return parent::removeScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function resetScopes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resetScopes', []);

        return parent::resetScopes();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentVariants()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentVariants', []);

        return parent::getContentVariants();
    }

    /**
     * {@inheritDoc}
     */
    public function addContentVariant(\Oro\Bundle\WebCatalogBundle\Entity\ContentVariant $page)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addContentVariant', [$page]);

        return parent::addContentVariant($page);
    }

    /**
     * {@inheritDoc}
     */
    public function removeContentVariant(\Oro\Bundle\WebCatalogBundle\Entity\ContentVariant $page)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeContentVariant', [$page]);

        return parent::removeContentVariant($page);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultVariant()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultVariant', []);

        return parent::getDefaultVariant();
    }

    /**
     * {@inheritDoc}
     */
    public function getMaterializedPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaterializedPath', []);

        return parent::getMaterializedPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaterializedPath($materializedPath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaterializedPath', [$materializedPath]);

        return parent::setMaterializedPath($materializedPath);
    }

    /**
     * {@inheritDoc}
     */
    public function getWebCatalog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebCatalog', []);

        return parent::getWebCatalog();
    }

    /**
     * {@inheritDoc}
     */
    public function setWebCatalog(\Oro\Bundle\WebCatalogBundle\Entity\WebCatalog $webCatalog)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWebCatalog', [$webCatalog]);

        return parent::setWebCatalog($webCatalog);
    }

    /**
     * {@inheritDoc}
     */
    public function isParentScopeUsed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isParentScopeUsed', []);

        return parent::isParentScopeUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentScopeUsed($parentScopeUsed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentScopeUsed', [$parentScopeUsed]);

        return parent::setParentScopeUsed($parentScopeUsed);
    }

    /**
     * {@inheritDoc}
     */
    public function isRewriteVariantTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRewriteVariantTitle', []);

        return parent::isRewriteVariantTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setRewriteVariantTitle($rewriteVariantTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRewriteVariantTitle', [$rewriteVariantTitle]);

        return parent::setRewriteVariantTitle($rewriteVariantTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getScopesConsideringParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScopesConsideringParent', []);

        return parent::getScopesConsideringParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocalizedUrls()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocalizedUrls', []);

        return parent::getLocalizedUrls();
    }

    /**
     * {@inheritDoc}
     */
    public function addLocalizedUrl(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLocalizedUrl', [$url]);

        return parent::addLocalizedUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLocalizedUrl(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLocalizedUrl', [$url]);

        return parent::removeLocalizedUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLocalizedUrl(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLocalizedUrl', [$url]);

        return parent::hasLocalizedUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function setSerializedData($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSerializedData', [$value]);

        return parent::setSerializedData($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaTitles($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaTitles', [$value]);

        return parent::setMetaTitles($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaKeywords($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaKeywords', [$value]);

        return parent::setMetaKeywords($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaDescriptions($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaDescriptions', [$value]);

        return parent::setMetaDescriptions($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultTitle($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultTitle', [$value]);

        return parent::setDefaultTitle($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultSlugPrototype($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultSlugPrototype', [$value]);

        return parent::setDefaultSlugPrototype($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetaTitles($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetaTitles', [$value]);

        return parent::removeMetaTitles($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetaTitl($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetaTitl', [$value]);

        return parent::removeMetaTitl($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetaKeywords($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetaKeywords', [$value]);

        return parent::removeMetaKeywords($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetaKeyword($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetaKeyword', [$value]);

        return parent::removeMetaKeyword($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetaDescriptions($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetaDescriptions', [$value]);

        return parent::removeMetaDescriptions($value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetaDescription($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetaDescription', [$value]);

        return parent::removeMetaDescription($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(\Oro\Bundle\LocaleBundle\Entity\Localization $localization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', [$localization]);

        return parent::getTitle($localization);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlugPrototype(\Oro\Bundle\LocaleBundle\Entity\Localization $localization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlugPrototype', [$localization]);

        return parent::getSlugPrototype($localization);
    }

    /**
     * {@inheritDoc}
     */
    public function getSerializedData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSerializedData', []);

        return parent::getSerializedData();
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaTitles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaTitles', []);

        return parent::getMetaTitles();
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaKeywords', []);

        return parent::getMetaKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaDescriptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaDescriptions', []);

        return parent::getMetaDescriptions();
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultTitle', []);

        return parent::getDefaultTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultSlugPrototype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultSlugPrototype', []);

        return parent::getDefaultSlugPrototype();
    }

    /**
     * {@inheritDoc}
     */
    public function addMetaTitles($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetaTitles', [$value]);

        return parent::addMetaTitles($value);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetaTitl($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetaTitl', [$value]);

        return parent::addMetaTitl($value);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetaKeywords($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetaKeywords', [$value]);

        return parent::addMetaKeywords($value);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetaKeyword($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetaKeyword', [$value]);

        return parent::addMetaKeyword($value);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetaDescriptions($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetaDescriptions', [$value]);

        return parent::addMetaDescriptions($value);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetaDescription($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetaDescription', [$value]);

        return parent::addMetaDescription($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeft()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeft', []);

        return parent::getLeft();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeft($left)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeft', [$left]);

        return parent::setLeft($left);
    }

    /**
     * {@inheritDoc}
     */
    public function getLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevel', []);

        return parent::getLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLevel($level)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLevel', [$level]);

        return parent::setLevel($level);
    }

    /**
     * {@inheritDoc}
     */
    public function getRight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRight', []);

        return parent::getRight();
    }

    /**
     * {@inheritDoc}
     */
    public function setRight($right)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRight', [$right]);

        return parent::setRight($right);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoot', []);

        return parent::getRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoot($root)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoot', [$root]);

        return parent::setRoot($root);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isUpdatedAtSet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isUpdatedAtSet', []);

        return parent::isUpdatedAtSet();
    }

    /**
     * {@inheritDoc}
     */
    public function getSlugPrototypesWithRedirect()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlugPrototypesWithRedirect', []);

        return parent::getSlugPrototypesWithRedirect();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlugPrototypesWithRedirect(\Oro\Bundle\RedirectBundle\Model\SlugPrototypesWithRedirect $slugPrototypesWithRedirect)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlugPrototypesWithRedirect', [$slugPrototypesWithRedirect]);

        return parent::setSlugPrototypesWithRedirect($slugPrototypesWithRedirect);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlugPrototypes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlugPrototypes', []);

        return parent::getSlugPrototypes();
    }

    /**
     * {@inheritDoc}
     */
    public function addSlugPrototype(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $slugPrototype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSlugPrototype', [$slugPrototype]);

        return parent::addSlugPrototype($slugPrototype);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSlugPrototype(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $slugPrototype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSlugPrototype', [$slugPrototype]);

        return parent::removeSlugPrototype($slugPrototype);
    }

    /**
     * {@inheritDoc}
     */
    public function hasSlugPrototype(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $slugPrototype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasSlugPrototype', [$slugPrototype]);

        return parent::hasSlugPrototype($slugPrototype);
    }

}
