<?php

namespace Proxies\__CG__\Oro\Bundle\ImapBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UserEmailOrigin extends \Oro\Bundle\ImapBundle\Entity\UserEmailOrigin implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'imapHost', 'imapPort', 'smtpHost', 'smtpPort', 'imapEncryption', 'smtpEncryption', 'user', 'password', 'mailbox', 'accessToken', 'refreshToken', 'accessTokenExpiresAt', 'clientId', 'id', 'mailboxName', 'folders', 'emailUsers', 'isActive', 'syncCodeUpdatedAt', 'synchronizedAt', 'syncCode', 'syncCount', 'owner', 'organization'];
        }

        return ['__isInitialized__', 'imapHost', 'imapPort', 'smtpHost', 'smtpPort', 'imapEncryption', 'smtpEncryption', 'user', 'password', 'mailbox', 'accessToken', 'refreshToken', 'accessTokenExpiresAt', 'clientId', 'id', 'mailboxName', 'folders', 'emailUsers', 'isActive', 'syncCodeUpdatedAt', 'synchronizedAt', 'syncCode', 'syncCount', 'owner', 'organization'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UserEmailOrigin $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getImapHost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImapHost', []);

        return parent::getImapHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setImapHost($imapHost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImapHost', [$imapHost]);

        return parent::setImapHost($imapHost);
    }

    /**
     * {@inheritDoc}
     */
    public function getSmtpHost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSmtpHost', []);

        return parent::getSmtpHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setSmtpHost($smtpHost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSmtpHost', [$smtpHost]);

        return parent::setSmtpHost($smtpHost);
    }

    /**
     * {@inheritDoc}
     */
    public function getSmtpPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSmtpPort', []);

        return parent::getSmtpPort();
    }

    /**
     * {@inheritDoc}
     */
    public function setSmtpPort($smtpPort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSmtpPort', [$smtpPort]);

        return parent::setSmtpPort($smtpPort);
    }

    /**
     * {@inheritDoc}
     */
    public function getImapPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImapPort', []);

        return parent::getImapPort();
    }

    /**
     * {@inheritDoc}
     */
    public function setImapPort($imapPort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImapPort', [$imapPort]);

        return parent::setImapPort($imapPort);
    }

    /**
     * {@inheritDoc}
     */
    public function getImapEncryption()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImapEncryption', []);

        return parent::getImapEncryption();
    }

    /**
     * {@inheritDoc}
     */
    public function setImapEncryption($imapEncryption)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImapEncryption', [$imapEncryption]);

        return parent::setImapEncryption($imapEncryption);
    }

    /**
     * {@inheritDoc}
     */
    public function getSmtpEncryption()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSmtpEncryption', []);

        return parent::getSmtpEncryption();
    }

    /**
     * {@inheritDoc}
     */
    public function setSmtpEncryption($smtpEncryption)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSmtpEncryption', [$smtpEncryption]);

        return parent::setSmtpEncryption($smtpEncryption);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function isSmtpConfigured()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSmtpConfigured', []);

        return parent::isSmtpConfigured();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function beforeSave()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'beforeSave', []);

        return parent::beforeSave();
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessToken', []);

        return parent::getAccessToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessToken($accessToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessToken', [$accessToken]);

        return parent::setAccessToken($accessToken);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefreshToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefreshToken', []);

        return parent::getRefreshToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setRefreshToken($refreshToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRefreshToken', [$refreshToken]);

        return parent::setRefreshToken($refreshToken);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessTokenExpiresAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessTokenExpiresAt', []);

        return parent::getAccessTokenExpiresAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessTokenExpiresAt(\DateTime $datetime = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessTokenExpiresAt', [$datetime]);

        return parent::setAccessTokenExpiresAt($datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function setClientId($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClientId', [$value]);

        return parent::setClientId($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getClientId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClientId', []);

        return parent::getClientId();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getFolder($type, $fullName = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFolder', [$type, $fullName]);

        return parent::getFolder($type, $fullName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFolders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFolders', []);

        return parent::getFolders();
    }

    /**
     * {@inheritDoc}
     */
    public function getRootFolders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRootFolders', []);

        return parent::getRootFolders();
    }

    /**
     * {@inheritDoc}
     */
    public function setFolders($folders)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFolders', [$folders]);

        return parent::setFolders($folders);
    }

    /**
     * {@inheritDoc}
     */
    public function addFolder(\Oro\Bundle\EmailBundle\Entity\EmailFolder $folder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFolder', [$folder]);

        return parent::addFolder($folder);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFolder(\Oro\Bundle\EmailBundle\Entity\EmailFolder $folder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFolder', [$folder]);

        return parent::removeFolder($folder);
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$isActive]);

        return parent::setActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getSyncCodeUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSyncCodeUpdatedAt', []);

        return parent::getSyncCodeUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getSynchronizedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSynchronizedAt', []);

        return parent::getSynchronizedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setSynchronizedAt($synchronizedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSynchronizedAt', [$synchronizedAt]);

        return parent::setSynchronizedAt($synchronizedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getSyncCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSyncCode', []);

        return parent::getSyncCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setSyncCode($syncCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSyncCode', [$syncCode]);

        return parent::setSyncCode($syncCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getSyncCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSyncCount', []);

        return parent::getSyncCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganization', []);

        return parent::getOrganization();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganization(\Oro\Bundle\OrganizationBundle\Entity\OrganizationInterface $organization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganization', [$organization]);

        return parent::setOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$user]);

        return parent::setOwner($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getMailboxName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMailboxName', []);

        return parent::getMailboxName();
    }

    /**
     * {@inheritDoc}
     */
    public function setMailboxName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMailboxName', [$name]);

        return parent::setMailboxName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getMailbox()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMailbox', []);

        return parent::getMailbox();
    }

    /**
     * {@inheritDoc}
     */
    public function setMailbox(\Oro\Bundle\EmailBundle\Entity\Mailbox $mailbox = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMailbox', [$mailbox]);

        return parent::setMailbox($mailbox);
    }

}
