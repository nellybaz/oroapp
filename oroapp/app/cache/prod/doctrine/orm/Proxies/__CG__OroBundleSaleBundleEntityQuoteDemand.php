<?php

namespace Proxies\__CG__\Oro\Bundle\SaleBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class QuoteDemand extends \Oro\Bundle\SaleBundle\Entity\QuoteDemand implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'quote', 'demandProducts', 'subtotal', 'total', 'totalCurrency', 'customerUser', 'customer'];
        }

        return ['__isInitialized__', 'id', 'quote', 'demandProducts', 'subtotal', 'total', 'totalCurrency', 'customerUser', 'customer'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (QuoteDemand $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuote', []);

        return parent::getQuote();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuote(\Oro\Bundle\SaleBundle\Entity\Quote $quote)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuote', [$quote]);

        return parent::setQuote($quote);
    }

    /**
     * {@inheritDoc}
     */
    public function getDemandProducts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDemandProducts', []);

        return parent::getDemandProducts();
    }

    /**
     * {@inheritDoc}
     */
    public function addDemandProduct(\Oro\Bundle\SaleBundle\Entity\QuoteProductDemand $demandProduct)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDemandProduct', [$demandProduct]);

        return parent::addDemandProduct($demandProduct);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDemandProduct(\Oro\Bundle\SaleBundle\Entity\QuoteProductDemand $demandProduct)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDemandProduct', [$demandProduct]);

        return parent::removeDemandProduct($demandProduct);
    }

    /**
     * {@inheritDoc}
     */
    public function getLineItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLineItems', []);

        return parent::getLineItems();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingCost', []);

        return parent::getShippingCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingMethod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingMethod', []);

        return parent::getShippingMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingMethodType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingMethodType', []);

        return parent::getShippingMethodType();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceDocument', []);

        return parent::getSourceDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceDocumentIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceDocumentIdentifier', []);

        return parent::getSourceDocumentIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalCurrency($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalCurrency', [$currency]);

        return parent::setTotalCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalCurrency', []);

        return parent::getTotalCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubtotal($subtotal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubtotal', [$subtotal]);

        return parent::setSubtotal($subtotal);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubtotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubtotal', []);

        return parent::getSubtotal();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotal($total)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotal', [$total]);

        return parent::setTotal($total);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotal', []);

        return parent::getTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerUser', []);

        return parent::getCustomerUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomerUser(\Oro\Bundle\CustomerBundle\Entity\CustomerUser $customerUser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomerUser', [$customerUser]);

        return parent::setCustomerUser($customerUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', []);

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer(\Oro\Bundle\CustomerBundle\Entity\Customer $customer = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', [$customer]);

        return parent::setCustomer($customer);
    }

}
