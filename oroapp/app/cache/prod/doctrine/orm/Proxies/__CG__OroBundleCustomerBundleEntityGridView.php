<?php

namespace Proxies\__CG__\Oro\Bundle\CustomerBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class GridView extends \Oro\Bundle\CustomerBundle\Entity\GridView implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'users', 'customerUserOwner', 'id', 'name', 'type', 'filtersData', 'sortersData', 'columnsData', 'gridName', 'appearanceType', 'appearanceData', 'organization'];
        }

        return ['__isInitialized__', 'users', 'customerUserOwner', 'id', 'name', 'type', 'filtersData', 'sortersData', 'columnsData', 'gridName', 'appearanceType', 'appearanceData', 'organization'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (GridView $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(\Oro\Bundle\UserBundle\Entity\AbstractUser $owner = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerUserOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerUserOwner', []);

        return parent::getCustomerUserOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomerUserOwner(\Oro\Bundle\CustomerBundle\Entity\CustomerUser $owner = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomerUserOwner', [$owner]);

        return parent::setCustomerUserOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function getFiltersData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFiltersData', []);

        return parent::getFiltersData();
    }

    /**
     * {@inheritDoc}
     */
    public function getSortersData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSortersData', []);

        return parent::getSortersData();
    }

    /**
     * {@inheritDoc}
     */
    public function getGridName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGridName', []);

        return parent::getGridName();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function setFiltersData(array $filtersData = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFiltersData', [$filtersData]);

        return parent::setFiltersData($filtersData);
    }

    /**
     * {@inheritDoc}
     */
    public function setSortersData(array $sortersData = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSortersData', [$sortersData]);

        return parent::setSortersData($sortersData);
    }

    /**
     * {@inheritDoc}
     */
    public function getColumnsData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColumnsData', []);

        return parent::getColumnsData();
    }

    /**
     * {@inheritDoc}
     */
    public function setColumnsData(array $columnsData = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColumnsData', [$columnsData]);

        return parent::setColumnsData($columnsData);
    }

    /**
     * {@inheritDoc}
     */
    public function setGridName($gridName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGridName', [$gridName]);

        return parent::setGridName($gridName);
    }

    /**
     * {@inheritDoc}
     */
    public function createView()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createView', []);

        return parent::createView();
    }

    /**
     * {@inheritDoc}
     */
    public function getAppearanceType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAppearanceType', []);

        return parent::getAppearanceType();
    }

    /**
     * {@inheritDoc}
     */
    public function setAppearanceType($appearanceType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAppearanceType', [$appearanceType]);

        return parent::setAppearanceType($appearanceType);
    }

    /**
     * {@inheritDoc}
     */
    public function getAppearanceTypeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAppearanceTypeName', []);

        return parent::getAppearanceTypeName();
    }

    /**
     * {@inheritDoc}
     */
    public function getAppearanceData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAppearanceData', []);

        return parent::getAppearanceData();
    }

    /**
     * {@inheritDoc}
     */
    public function setAppearanceData(array $appearanceData = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAppearanceData', [$appearanceData]);

        return parent::setAppearanceData($appearanceData);
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganization(\Oro\Bundle\OrganizationBundle\Entity\OrganizationInterface $organization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganization', [$organization]);

        return parent::setOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganization', []);

        return parent::getOrganization();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\Oro\Bundle\DataGridBundle\Entity\AbstractGridViewUser $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', [$user]);

        return parent::addUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\Oro\Bundle\DataGridBundle\Entity\AbstractGridViewUser $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', [$user]);

        return parent::removeUser($user);
    }

}
