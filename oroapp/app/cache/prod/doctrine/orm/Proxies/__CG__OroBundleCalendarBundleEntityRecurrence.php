<?php

namespace Proxies\__CG__\Oro\Bundle\CalendarBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Recurrence extends \Oro\Bundle\CalendarBundle\Entity\Recurrence implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'calendarEvent', 'recurrenceType', 'interval', 'instance', 'dayOfWeek', 'dayOfMonth', 'monthOfYear', 'startTime', 'endTime', 'calculatedEndTime', 'occurrences', 'timeZone'];
        }

        return ['__isInitialized__', 'id', 'calendarEvent', 'recurrenceType', 'interval', 'instance', 'dayOfWeek', 'dayOfMonth', 'monthOfYear', 'startTime', 'endTime', 'calculatedEndTime', 'occurrences', 'timeZone'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Recurrence $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCalendarEvent(\Oro\Bundle\CalendarBundle\Entity\CalendarEvent $calendarEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCalendarEvent', [$calendarEvent]);

        return parent::setCalendarEvent($calendarEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalendarEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalendarEvent', []);

        return parent::getCalendarEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecurrenceType($recurrenceType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecurrenceType', [$recurrenceType]);

        return parent::setRecurrenceType($recurrenceType);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecurrenceType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecurrenceType', []);

        return parent::getRecurrenceType();
    }

    /**
     * {@inheritDoc}
     */
    public function setInterval($interval)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInterval', [$interval]);

        return parent::setInterval($interval);
    }

    /**
     * {@inheritDoc}
     */
    public function getInterval()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInterval', []);

        return parent::getInterval();
    }

    /**
     * {@inheritDoc}
     */
    public function setInstance($instance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInstance', [$instance]);

        return parent::setInstance($instance);
    }

    /**
     * {@inheritDoc}
     */
    public function getInstance()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstance', []);

        return parent::getInstance();
    }

    /**
     * {@inheritDoc}
     */
    public function setDayOfWeek(array $dayOfWeek = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDayOfWeek', [$dayOfWeek]);

        return parent::setDayOfWeek($dayOfWeek);
    }

    /**
     * {@inheritDoc}
     */
    public function getDayOfWeek()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDayOfWeek', []);

        return parent::getDayOfWeek();
    }

    /**
     * {@inheritDoc}
     */
    public function setDayOfMonth($dayOfMonth)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDayOfMonth', [$dayOfMonth]);

        return parent::setDayOfMonth($dayOfMonth);
    }

    /**
     * {@inheritDoc}
     */
    public function getDayOfMonth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDayOfMonth', []);

        return parent::getDayOfMonth();
    }

    /**
     * {@inheritDoc}
     */
    public function setMonthOfYear($monthOfYear)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMonthOfYear', [$monthOfYear]);

        return parent::setMonthOfYear($monthOfYear);
    }

    /**
     * {@inheritDoc}
     */
    public function getMonthOfYear()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMonthOfYear', []);

        return parent::getMonthOfYear();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartTime($startTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartTime', [$startTime]);

        return parent::setStartTime($startTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTime', []);

        return parent::getStartTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndTime($endTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndTime', [$endTime]);

        return parent::setEndTime($endTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndTime', []);

        return parent::getEndTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setCalculatedEndTime($calculatedEndTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCalculatedEndTime', [$calculatedEndTime]);

        return parent::setCalculatedEndTime($calculatedEndTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalculatedEndTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalculatedEndTime', []);

        return parent::getCalculatedEndTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setOccurrences($occurrences)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOccurrences', [$occurrences]);

        return parent::setOccurrences($occurrences);
    }

    /**
     * {@inheritDoc}
     */
    public function getOccurrences()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOccurrences', []);

        return parent::getOccurrences();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeZone($timeZone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeZone', [$timeZone]);

        return parent::setTimeZone($timeZone);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeZone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeZone', []);

        return parent::getTimeZone();
    }

    /**
     * {@inheritDoc}
     */
    public function isEqual($other)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEqual', [$other]);

        return parent::isEqual($other);
    }

}
