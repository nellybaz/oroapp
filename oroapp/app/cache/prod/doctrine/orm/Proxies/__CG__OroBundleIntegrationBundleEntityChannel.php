<?php

namespace Proxies\__CG__\Oro\Bundle\IntegrationBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Channel extends \Oro\Bundle\IntegrationBundle\Entity\Channel implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'type', 'transport', 'connectors', 'synchronizationSettings', 'mappingSettings', 'enabled', 'previouslyEnabled', 'defaultUserOwner', 'defaultBusinessUnitOwner', 'organization', 'statuses', 'editMode'];
        }

        return ['__isInitialized__', 'id', 'name', 'type', 'transport', 'connectors', 'synchronizationSettings', 'mappingSettings', 'enabled', 'previouslyEnabled', 'defaultUserOwner', 'defaultBusinessUnitOwner', 'organization', 'statuses', 'editMode'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Channel $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setTransport(\Oro\Bundle\IntegrationBundle\Entity\Transport $transport)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTransport', [$transport]);

        return parent::setTransport($transport);
    }

    /**
     * {@inheritDoc}
     */
    public function getTransport()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTransport', []);

        return parent::getTransport();
    }

    /**
     * {@inheritDoc}
     */
    public function clearTransport()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearTransport', []);

        return parent::clearTransport();
    }

    /**
     * {@inheritDoc}
     */
    public function setConnectors($connectors)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConnectors', [$connectors]);

        return parent::setConnectors($connectors);
    }

    /**
     * {@inheritDoc}
     */
    public function getConnectors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConnectors', []);

        return parent::getConnectors();
    }

    /**
     * {@inheritDoc}
     */
    public function setSynchronizationSettings($synchronizationSettings)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSynchronizationSettings', [$synchronizationSettings]);

        return parent::setSynchronizationSettings($synchronizationSettings);
    }

    /**
     * {@inheritDoc}
     */
    public function getSynchronizationSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSynchronizationSettings', []);

        return parent::getSynchronizationSettings();
    }

    /**
     * {@inheritDoc}
     */
    public function getSynchronizationSettingsReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSynchronizationSettingsReference', []);

        return parent::getSynchronizationSettingsReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setMappingSettings($mappingSettings)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMappingSettings', [$mappingSettings]);

        return parent::setMappingSettings($mappingSettings);
    }

    /**
     * {@inheritDoc}
     */
    public function getMappingSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMappingSettings', []);

        return parent::getMappingSettings();
    }

    /**
     * {@inheritDoc}
     */
    public function getMappingSettingsReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMappingSettingsReference', []);

        return parent::getMappingSettingsReference();
    }

    /**
     * {@inheritDoc}
     */
    public function addStatus(\Oro\Bundle\IntegrationBundle\Entity\Status $status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStatus', [$status]);

        return parent::addStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatuses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatuses', []);

        return parent::getStatuses();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusesForConnector($connector, $codeFilter = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusesForConnector', [$connector, $codeFilter]);

        return parent::getStatusesForConnector($connector, $codeFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultUserOwner(\Oro\Bundle\UserBundle\Entity\User $owner = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultUserOwner', [$owner]);

        return parent::setDefaultUserOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultUserOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultUserOwner', []);

        return parent::getDefaultUserOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganization(\Oro\Bundle\OrganizationBundle\Entity\OrganizationInterface $organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganization', [$organization]);

        return parent::setOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganization', []);

        return parent::getOrganization();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', []);

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', []);

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setEditMode($editMode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEditMode', [$editMode]);

        return parent::setEditMode($editMode);
    }

    /**
     * {@inheritDoc}
     */
    public function getEditMode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEditMode', []);

        return parent::getEditMode();
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultBusinessUnitOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultBusinessUnitOwner', []);

        return parent::getDefaultBusinessUnitOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultBusinessUnitOwner($defaultBusinessUnitOwner)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultBusinessUnitOwner', [$defaultBusinessUnitOwner]);

        return parent::setDefaultBusinessUnitOwner($defaultBusinessUnitOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getPreviouslyEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPreviouslyEnabled', []);

        return parent::getPreviouslyEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setPreviouslyEnabled($previouslyEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPreviouslyEnabled', [$previouslyEnabled]);

        return parent::setPreviouslyEnabled($previouslyEnabled);
    }

}
