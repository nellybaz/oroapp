<?php

namespace Proxies\__CG__\Oro\Bundle\ZendeskBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Ticket extends \Oro\Bundle\ZendeskBundle\Entity\Ticket implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'originId', 'url', 'subject', 'description', 'externalId', 'problem', 'collaborators', 'type', 'status', 'priority', 'recipient', 'requester', 'submitter', 'assignee', 'hasIncidents', 'dueAt', 'createdAt', 'originCreatedAt', 'updatedAt', 'originUpdatedAt', 'comments', 'relatedCase', 'channel', '' . "\0" . 'Oro\\Bundle\\ZendeskBundle\\Entity\\Ticket' . "\0" . 'updatedAtLocked'];
        }

        return ['__isInitialized__', 'id', 'originId', 'url', 'subject', 'description', 'externalId', 'problem', 'collaborators', 'type', 'status', 'priority', 'recipient', 'requester', 'submitter', 'assignee', 'hasIncidents', 'dueAt', 'createdAt', 'originCreatedAt', 'updatedAt', 'originUpdatedAt', 'comments', 'relatedCase', 'channel', '' . "\0" . 'Oro\\Bundle\\ZendeskBundle\\Entity\\Ticket' . "\0" . 'updatedAtLocked'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Ticket $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginId', []);

        return parent::getOriginId();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginId($originId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginId', [$originId]);

        return parent::setOriginId($originId);
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubject($subject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubject', [$subject]);

        return parent::setSubject($subject);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubject', []);

        return parent::getSubject();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalId($externalId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalId', [$externalId]);

        return parent::setExternalId($externalId);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalId', []);

        return parent::getExternalId();
    }

    /**
     * {@inheritDoc}
     */
    public function setProblem(\Oro\Bundle\ZendeskBundle\Entity\Ticket $problem = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProblem', [$problem]);

        return parent::setProblem($problem);
    }

    /**
     * {@inheritDoc}
     */
    public function getProblem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProblem', []);

        return parent::getProblem();
    }

    /**
     * {@inheritDoc}
     */
    public function setCollaborators(\Doctrine\Common\Collections\Collection $collaborators)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCollaborators', [$collaborators]);

        return parent::setCollaborators($collaborators);
    }

    /**
     * {@inheritDoc}
     */
    public function getCollaborators()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCollaborators', []);

        return parent::getCollaborators();
    }

    /**
     * {@inheritDoc}
     */
    public function addCollaborator(\Oro\Bundle\ZendeskBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCollaborator', [$user]);

        return parent::addCollaborator($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCollaborator(\Oro\Bundle\ZendeskBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCollaborator', [$user]);

        return parent::removeCollaborator($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setType(\Oro\Bundle\ZendeskBundle\Entity\TicketType $type = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(\Oro\Bundle\ZendeskBundle\Entity\TicketStatus $status = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority(\Oro\Bundle\ZendeskBundle\Entity\TicketPriority $priority = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', [$priority]);

        return parent::setPriority($priority);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', []);

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecipient($recipient)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecipient', [$recipient]);

        return parent::setRecipient($recipient);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecipient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecipient', []);

        return parent::getRecipient();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequester(\Oro\Bundle\ZendeskBundle\Entity\User $requester = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequester', [$requester]);

        return parent::setRequester($requester);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequester()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequester', []);

        return parent::getRequester();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubmitter(\Oro\Bundle\ZendeskBundle\Entity\User $submitter = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubmitter', [$submitter]);

        return parent::setSubmitter($submitter);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubmitter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubmitter', []);

        return parent::getSubmitter();
    }

    /**
     * {@inheritDoc}
     */
    public function setAssignee(\Oro\Bundle\ZendeskBundle\Entity\User $assignee = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssignee', [$assignee]);

        return parent::setAssignee($assignee);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssignee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssignee', []);

        return parent::getAssignee();
    }

    /**
     * {@inheritDoc}
     */
    public function setHasIncidents($hasIncidents)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHasIncidents', [$hasIncidents]);

        return parent::setHasIncidents($hasIncidents);
    }

    /**
     * {@inheritDoc}
     */
    public function getHasIncidents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHasIncidents', []);

        return parent::getHasIncidents();
    }

    /**
     * {@inheritDoc}
     */
    public function setDueAt(\DateTime $dueAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDueAt', [$dueAt]);

        return parent::setDueAt($dueAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDueAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDueAt', []);

        return parent::getDueAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginCreatedAt(\DateTime $originCreatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginCreatedAt', [$originCreatedAt]);

        return parent::setOriginCreatedAt($originCreatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginCreatedAt', []);

        return parent::getOriginCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginUpdatedAt(\DateTime $originUpdatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginUpdatedAt', [$originUpdatedAt]);

        return parent::setOriginUpdatedAt($originUpdatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginUpdatedAt', []);

        return parent::getOriginUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments(\Doctrine\Common\Collections\Collection $comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', [$comments]);

        return parent::setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\Oro\Bundle\ZendeskBundle\Entity\TicketComment $comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', [$comment]);

        return parent::addComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment(\Oro\Bundle\ZendeskBundle\Entity\TicketComment $comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', [$comment]);

        return parent::removeComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function setRelatedCase(\Oro\Bundle\CaseBundle\Entity\CaseEntity $case = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRelatedCase', [$case]);

        return parent::setRelatedCase($case);
    }

    /**
     * {@inheritDoc}
     */
    public function getRelatedCase()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelatedCase', []);

        return parent::getRelatedCase();
    }

    /**
     * {@inheritDoc}
     */
    public function setChannel(\Oro\Bundle\IntegrationBundle\Entity\Channel $integration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChannel', [$integration]);

        return parent::setChannel($integration);
    }

    /**
     * {@inheritDoc}
     */
    public function getChannel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannel', []);

        return parent::getChannel();
    }

    /**
     * {@inheritDoc}
     */
    public function getChannelName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannelName', []);

        return parent::getChannelName();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', []);

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', []);

        return parent::preUpdate();
    }

}
