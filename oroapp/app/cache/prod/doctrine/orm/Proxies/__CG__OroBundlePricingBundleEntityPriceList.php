<?php

namespace Proxies\__CG__\Oro\Bundle\PricingBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PriceList extends \Oro\Bundle\PricingBundle\Entity\PriceList implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'default', 'active', 'actual', 'prices', 'currencies', 'schedules', 'containSchedule', 'productAssignmentRule', 'priceRules', 'serialized_data', 'id', 'name', 'createdAt', 'updatedAt', 'updatedAtSet'];
        }

        return ['__isInitialized__', 'default', 'active', 'actual', 'prices', 'currencies', 'schedules', 'containSchedule', 'productAssignmentRule', 'priceRules', 'serialized_data', 'id', 'name', 'createdAt', 'updatedAt', 'updatedAtSet'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PriceList $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setDefault($default)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefault', [$default]);

        return parent::setDefault($default);
    }

    /**
     * {@inheritDoc}
     */
    public function isDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDefault', []);

        return parent::isDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function getSchedules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSchedules', []);

        return parent::getSchedules();
    }

    /**
     * {@inheritDoc}
     */
    public function setSchedules($schedules)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSchedules', [$schedules]);

        return parent::setSchedules($schedules);
    }

    /**
     * {@inheritDoc}
     */
    public function addSchedule(\Oro\Bundle\PricingBundle\Entity\PriceListSchedule $schedule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSchedule', [$schedule]);

        return parent::addSchedule($schedule);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSchedule(\Oro\Bundle\PricingBundle\Entity\PriceListSchedule $schedule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSchedule', [$schedule]);

        return parent::removeSchedule($schedule);
    }

    /**
     * {@inheritDoc}
     */
    public function isContainSchedule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isContainSchedule', []);

        return parent::isContainSchedule();
    }

    /**
     * {@inheritDoc}
     */
    public function setContainSchedule($containSchedule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContainSchedule', [$containSchedule]);

        return parent::setContainSchedule($containSchedule);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshContainSchedule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'refreshContainSchedule', []);

        return parent::refreshContainSchedule();
    }

    /**
     * {@inheritDoc}
     */
    public function getPriceRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriceRules', []);

        return parent::getPriceRules();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriceRules($priceRules)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriceRules', [$priceRules]);

        return parent::setPriceRules($priceRules);
    }

    /**
     * {@inheritDoc}
     */
    public function addPriceRule(\Oro\Bundle\PricingBundle\Entity\PriceRule $priceRule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPriceRule', [$priceRule]);

        return parent::addPriceRule($priceRule);
    }

    /**
     * {@inheritDoc}
     */
    public function removePriceRule(\Oro\Bundle\PricingBundle\Entity\PriceRule $priceRule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePriceRule', [$priceRule]);

        return parent::removePriceRule($priceRule);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductAssignmentRule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductAssignmentRule', []);

        return parent::getProductAssignmentRule();
    }

    /**
     * {@inheritDoc}
     */
    public function setProductAssignmentRule($productAssignmentRule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductAssignmentRule', [$productAssignmentRule]);

        return parent::setProductAssignmentRule($productAssignmentRule);
    }

    /**
     * {@inheritDoc}
     */
    public function hasSchedule(\Oro\Bundle\PricingBundle\Entity\PriceListSchedule $needle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasSchedule', [$needle]);

        return parent::hasSchedule($needle);
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function isActual()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActual', []);

        return parent::isActual();
    }

    /**
     * {@inheritDoc}
     */
    public function setActual($actual)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActual', [$actual]);

        return parent::setActual($actual);
    }

    /**
     * {@inheritDoc}
     */
    public function setPriceListCurrencies($currencies): \Oro\Bundle\PricingBundle\Entity\PriceList
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriceListCurrencies', [$currencies]);

        return parent::setPriceListCurrencies($currencies);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriceListCurrencies(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriceListCurrencies', []);

        return parent::getPriceListCurrencies();
    }

    /**
     * {@inheritDoc}
     */
    public function setSerializedData($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSerializedData', [$value]);

        return parent::setSerializedData($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getSerializedData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSerializedData', []);

        return parent::getSerializedData();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrencies(array $currencies)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrencies', [$currencies]);

        return parent::setCurrencies($currencies);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrencies()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrencies', []);

        return parent::getCurrencies();
    }

    /**
     * {@inheritDoc}
     */
    public function addCurrencyByCode($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCurrencyByCode', [$currency]);

        return parent::addCurrencyByCode($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function hasCurrencyCode($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCurrencyCode', [$currency]);

        return parent::hasCurrencyCode($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCurrencyByCode($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCurrencyByCode', [$currency]);

        return parent::removeCurrencyByCode($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriceListCurrencyByCode($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriceListCurrencyByCode', [$currency]);

        return parent::getPriceListCurrencyByCode($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isUpdatedAtSet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isUpdatedAtSet', []);

        return parent::isUpdatedAtSet();
    }

}
