<?php

namespace Proxies\__CG__\Oro\Bundle\WorkflowBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class WorkflowDefinition extends \Oro\Bundle\WorkflowBundle\Entity\WorkflowDefinition implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'name', 'label', 'relatedEntity', 'entityAttributeName', 'stepsDisplayOrdered', 'system', 'active', 'priority', 'configuration', 'scopes', 'steps', 'startStep', 'entityAcls', 'restrictions', 'exclusiveActiveGroups', 'exclusiveRecordGroups', 'createdAt', 'updatedAt', 'applications'];
        }

        return ['__isInitialized__', 'name', 'label', 'relatedEntity', 'entityAttributeName', 'stepsDisplayOrdered', 'system', 'active', 'priority', 'configuration', 'scopes', 'steps', 'startStep', 'entityAcls', 'restrictions', 'exclusiveActiveGroups', 'exclusiveRecordGroups', 'createdAt', 'updatedAt', 'applications'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (WorkflowDefinition $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function isForceAutostart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isForceAutostart', []);

        return parent::isForceAutostart();
    }

    /**
     * {@inheritDoc}
     */
    public function setScopesConfig(array $scopesConfig)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setScopesConfig', [$scopesConfig]);

        return parent::setScopesConfig($scopesConfig);
    }

    /**
     * {@inheritDoc}
     */
    public function getScopesConfig()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScopesConfig', []);

        return parent::getScopesConfig();
    }

    /**
     * {@inheritDoc}
     */
    public function hasScopesConfig()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasScopesConfig', []);

        return parent::hasScopesConfig();
    }

    /**
     * {@inheritDoc}
     */
    public function getDisabledOperations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisabledOperations', []);

        return parent::getDisabledOperations();
    }

    /**
     * {@inheritDoc}
     */
    public function hasDisabledOperations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDisabledOperations', []);

        return parent::hasDisabledOperations();
    }

    /**
     * {@inheritDoc}
     */
    public function getVirtualAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVirtualAttributes', []);

        return parent::getVirtualAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getName();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', []);

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setRelatedEntity($relatedEntity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRelatedEntity', [$relatedEntity]);

        return parent::setRelatedEntity($relatedEntity);
    }

    /**
     * {@inheritDoc}
     */
    public function getRelatedEntity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelatedEntity', []);

        return parent::getRelatedEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityAttributeName($entityAttributeName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityAttributeName', [$entityAttributeName]);

        return parent::setEntityAttributeName($entityAttributeName);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityAttributeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityAttributeName', []);

        return parent::getEntityAttributeName();
    }

    /**
     * {@inheritDoc}
     */
    public function isStepsDisplayOrdered()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStepsDisplayOrdered', []);

        return parent::isStepsDisplayOrdered();
    }

    /**
     * {@inheritDoc}
     */
    public function setStepsDisplayOrdered($stepsDisplayOrdered)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStepsDisplayOrdered', [$stepsDisplayOrdered]);

        return parent::setStepsDisplayOrdered($stepsDisplayOrdered);
    }

    /**
     * {@inheritDoc}
     */
    public function getScopes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScopes', []);

        return parent::getScopes();
    }

    /**
     * {@inheritDoc}
     */
    public function addScope(\Oro\Bundle\ScopeBundle\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addScope', [$scope]);

        return parent::addScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function removeScope(\Oro\Bundle\ScopeBundle\Entity\Scope $scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeScope', [$scope]);

        return parent::removeScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function setConfiguration($configuration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConfiguration', [$configuration]);

        return parent::setConfiguration($configuration);
    }

    /**
     * {@inheritDoc}
     */
    public function getConfiguration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfiguration', []);

        return parent::getConfiguration();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartStep($startStep)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartStep', [$startStep]);

        return parent::setStartStep($startStep);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartStep()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartStep', []);

        return parent::getStartStep();
    }

    /**
     * {@inheritDoc}
     */
    public function getSteps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSteps', []);

        return parent::getSteps();
    }

    /**
     * {@inheritDoc}
     */
    public function setSteps($steps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSteps', [$steps]);

        return parent::setSteps($steps);
    }

    /**
     * {@inheritDoc}
     */
    public function addStep(\Oro\Bundle\WorkflowBundle\Entity\WorkflowStep $step)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStep', [$step]);

        return parent::addStep($step);
    }

    /**
     * {@inheritDoc}
     */
    public function removeStep(\Oro\Bundle\WorkflowBundle\Entity\WorkflowStep $step)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeStep', [$step]);

        return parent::removeStep($step);
    }

    /**
     * {@inheritDoc}
     */
    public function hasStepByName($stepName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasStepByName', [$stepName]);

        return parent::hasStepByName($stepName);
    }

    /**
     * {@inheritDoc}
     */
    public function getStepByName($stepName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStepByName', [$stepName]);

        return parent::getStepByName($stepName);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityAcls()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityAcls', []);

        return parent::getEntityAcls();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityAcls($entityAcl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityAcls', [$entityAcl]);

        return parent::setEntityAcls($entityAcl);
    }

    /**
     * {@inheritDoc}
     */
    public function setRestrictions($restrictions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRestrictions', [$restrictions]);

        return parent::setRestrictions($restrictions);
    }

    /**
     * {@inheritDoc}
     */
    public function getRestrictions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRestrictions', []);

        return parent::getRestrictions();
    }

    /**
     * {@inheritDoc}
     */
    public function addRestriction(\Oro\Bundle\WorkflowBundle\Entity\WorkflowRestriction $restriction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRestriction', [$restriction]);

        return parent::addRestriction($restriction);
    }

    /**
     * {@inheritDoc}
     */
    public function addEntityAcl(\Oro\Bundle\WorkflowBundle\Entity\WorkflowEntityAcl $acl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEntityAcl', [$acl]);

        return parent::addEntityAcl($acl);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEntityAcl(\Oro\Bundle\WorkflowBundle\Entity\WorkflowEntityAcl $acl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEntityAcl', [$acl]);

        return parent::removeEntityAcl($acl);
    }

    /**
     * {@inheritDoc}
     */
    public function hasEntityAclByAttributeStep($attributeStep)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasEntityAclByAttributeStep', [$attributeStep]);

        return parent::hasEntityAclByAttributeStep($attributeStep);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityAclByAttributeStep($attributeStep)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityAclByAttributeStep', [$attributeStep]);

        return parent::getEntityAclByAttributeStep($attributeStep);
    }

    /**
     * {@inheritDoc}
     */
    public function isSystem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSystem', []);

        return parent::isSystem();
    }

    /**
     * {@inheritDoc}
     */
    public function setSystem($system)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSystem', [$system]);

        return parent::setSystem($system);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$created]);

        return parent::setCreatedAt($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updated]);

        return parent::setUpdatedAt($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function beforeSave()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'beforeSave', []);

        return parent::beforeSave();
    }

    /**
     * {@inheritDoc}
     */
    public function beforeUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'beforeUpdate', []);

        return parent::beforeUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getObjectIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjectIdentifier', []);

        return parent::getObjectIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', []);

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority($priority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', [$priority]);

        return parent::setPriority($priority);
    }

    /**
     * {@inheritDoc}
     */
    public function hasExclusiveActiveGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasExclusiveActiveGroups', []);

        return parent::hasExclusiveActiveGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getExclusiveActiveGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExclusiveActiveGroups', []);

        return parent::getExclusiveActiveGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function setExclusiveActiveGroups(array $groups)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExclusiveActiveGroups', [$groups]);

        return parent::setExclusiveActiveGroups($groups);
    }

    /**
     * {@inheritDoc}
     */
    public function hasExclusiveRecordGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasExclusiveRecordGroups', []);

        return parent::hasExclusiveRecordGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getExclusiveRecordGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExclusiveRecordGroups', []);

        return parent::getExclusiveRecordGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function setExclusiveRecordGroups(array $groups)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExclusiveRecordGroups', [$groups]);

        return parent::setExclusiveRecordGroups($groups);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatagrids()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatagrids', []);

        return parent::getDatagrids();
    }

    /**
     * {@inheritDoc}
     */
    public function getApplications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApplications', []);

        return parent::getApplications();
    }

    /**
     * {@inheritDoc}
     */
    public function setApplications(array $applications)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApplications', [$applications]);

        return parent::setApplications($applications);
    }

}
