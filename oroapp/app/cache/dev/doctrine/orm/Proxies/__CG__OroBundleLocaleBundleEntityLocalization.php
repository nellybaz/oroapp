<?php

namespace Proxies\__CG__\Oro\Bundle\LocaleBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Localization extends \Oro\Bundle\LocaleBundle\Entity\Localization implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'titles', 'language', 'formattingCode', 'parentLocalization', 'childLocalizations', 'serialized_data', 'createdAt', 'updatedAt', 'updatedAtSet'];
        }

        return ['__isInitialized__', 'id', 'name', 'titles', 'language', 'formattingCode', 'parentLocalization', 'childLocalizations', 'serialized_data', 'createdAt', 'updatedAt', 'updatedAtSet'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Localization $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguage($language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguage', [$language]);

        return parent::setLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguage', []);

        return parent::getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguageCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguageCode', []);

        return parent::getLanguageCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setFormattingCode($formattingCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFormattingCode', [$formattingCode]);

        return parent::setFormattingCode($formattingCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getFormattingCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFormattingCode', []);

        return parent::getFormattingCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentLocalization(\Oro\Bundle\LocaleBundle\Entity\Localization $parentLocalization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentLocalization', [$parentLocalization]);

        return parent::setParentLocalization($parentLocalization);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentLocalization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentLocalization', []);

        return parent::getParentLocalization();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildLocalizations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildLocalizations', []);

        return parent::getChildLocalizations();
    }

    /**
     * {@inheritDoc}
     */
    public function addChildLocalization(\Oro\Bundle\LocaleBundle\Entity\Localization $childLocalization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChildLocalization', [$childLocalization]);

        return parent::addChildLocalization($childLocalization);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChildLocalization(\Oro\Bundle\LocaleBundle\Entity\Localization $childLocalization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChildLocalization', [$childLocalization]);

        return parent::removeChildLocalization($childLocalization);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitles', []);

        return parent::getTitles();
    }

    /**
     * {@inheritDoc}
     */
    public function addTitle(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTitle', [$title]);

        return parent::addTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTitle(\Oro\Bundle\LocaleBundle\Entity\LocalizedFallbackValue $title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTitle', [$title]);

        return parent::removeTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getHierarchy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHierarchy', []);

        return parent::getHierarchy();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildrenIds($includeOwnId = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildrenIds', [$includeOwnId]);

        return parent::getChildrenIds($includeOwnId);
    }

    /**
     * {@inheritDoc}
     */
    public function setSerializedData($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSerializedData', [$value]);

        return parent::setSerializedData($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultTitle($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultTitle', [$value]);

        return parent::setDefaultTitle($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(\Oro\Bundle\LocaleBundle\Entity\Localization $localization = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', [$localization]);

        return parent::getTitle($localization);
    }

    /**
     * {@inheritDoc}
     */
    public function getSerializedData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSerializedData', []);

        return parent::getSerializedData();
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultTitle', []);

        return parent::getDefaultTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isUpdatedAtSet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isUpdatedAtSet', []);

        return parent::isUpdatedAtSet();
    }

}
